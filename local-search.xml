<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/202207131243066710/"/>
    <url>/posts/202207131243066710/</url>
    
    <content type="html"><![CDATA[<p>Welcome to oabern’s garden, this is my first post!</p><hr><h2 id="花">花</h2><h3 id="桃花">桃花</h3><p><code>杜甫</code></p><blockquote><p>桃花一簇开无主，可爱深红爱浅红。<br>–《江畔独步寻花·其五》杜甫</p></blockquote><h3 id="梨花">梨花</h3><p><code>丘为</code></p><blockquote><p>冷艳全欺雪，馀香乍入衣。<br>–《左掖梨花》丘为（唐）</p></blockquote><h2 id="庄子">庄子</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">井蛙不可以语于海者，拘于虚也；夏虫不可以语于冰者，笃于时也；曲士不可以语于道者，束于教也。（井蛙不语海，夏虫不语冰，凡夫不语道）<br><span class="hljs-comment">--《庄子集释》卷六下《外篇·秋水》</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/posts/20220707794273428/"/>
    <url>/posts/20220707794273428/</url>
    
    <content type="html"><![CDATA[<h2 id="简介-4">简介</h2><p><strong>正则表达式</strong>，又称规则表达式（Regular Expression，在代码中常简写为regex、regexp或RE），是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（“元字符”）。</p><p>正则表达式是一种<strong>用来描述规则的表达式</strong>，通常被用来检索、替换那些符合某个模式（规则）的文本。</p><p>正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及而来的，后广泛用于其他编程语言中。</p><p>正则的底层原理，就是使用状态机的思想进行模式匹配。大家可以利用<a href="https://regexper.com/">regexper.com</a>这个工具很好地可视化自己写的正则表达式的状态机。</p><h2 id="语法">语法</h2><p>正则表达式的基本<strong>组成元素</strong>可以分为：<strong>字符 和 元字符</strong>。</p><ul><li>字符，就是基础的计算机字符编码，通常正则表达式里面使用的就是数字、英文字母。</li><li>元字符，也被称为特殊字符，是一些用来表示特殊语义的字符。如^表示非，|表示或等。</li></ul><h3 id="字符">字符</h3><h4 id="单字符">单字符</h4><p>单个字符的映射关系是一对一, 最简单的正则就是单个字符。<br>部分特殊语义字符需要通过<code>\</code>来转义</p><table><thead><tr><th>特殊字符</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>换行符</td><td>\n</td><td>new line</td></tr><tr><td>换页符</td><td>\f</td><td>form feed</td></tr><tr><td>回车符</td><td>\r</td><td>return</td></tr><tr><td>空白符</td><td>\s</td><td>space</td></tr><tr><td>制表符</td><td>\t</td><td>tab</td></tr><tr><td>垂直制表符</td><td>\v</td><td>vertical tab</td></tr><tr><td>回退符</td><td>[\b]</td><td>backspace,之所以使用[]符号是避免和\b重复</td></tr></tbody></table><h4 id="多字符">多字符</h4><p>使用集合区间和通配符的方式就可以实现一对多的匹配。</p><p>集合的定义方式是使用中括号 <code>[</code> 和 <code>]</code> 。如 <code>/[123]/</code> 这个正则就能同时匹配1,2,3三个字符。如果想匹配所有的数字，可以用元字符 <code>-</code> 就可以用来表示区间范围，用 <code>/[0-9]/</code> 就能匹配所有的数字,  <code>/[a-z]/</code> 则可以匹配所有的英文小写字母。</p><p>即便有了集合和区间的定义方式，如果要同时匹配多种字符也要一一列举，这是低效的。所以在正则表达式里衍生了一批用来同时匹配多个字符的简便正则表达式:</p><table><thead><tr><th>匹配区间</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>除了换行符之外的任何字符</td><td>.</td><td>句号,除了句子结束符</td></tr><tr><td>单个数字, [0-9]</td><td>\d</td><td>digit</td></tr><tr><td>除了[0-9]</td><td>\D</td><td>not digit</td></tr><tr><td>包括下划线在内的单个字符，[A-Za-z0-9_]</td><td>\w</td><td>word</td></tr><tr><td>非单字字符</td><td>\W</td><td>not word</td></tr><tr><td>匹配空白字符,包括空格、制表符、换页符和换行符</td><td>\s</td><td>space</td></tr><tr><td>匹配非空白字符</td><td>\S</td><td>not space</td></tr></tbody></table><h3 id="逻辑处理">逻辑处理</h3><table><thead><tr><th>逻辑关系</th><th>正则元字符</th></tr></thead><tbody><tr><td>与</td><td>无</td></tr><tr><td>非</td><td>[^regex]和!</td></tr><tr><td>或</td><td>|</td></tr></tbody></table><h3 id="循环和重复">循环和重复</h3><p>通过定义单个规则的出现次数，可以简化正则</p><table><thead><tr><th>匹配规则</th><th>元字符</th><th>联想方式</th></tr></thead><tbody><tr><td>0次或1次</td><td>?</td><td>有无</td></tr><tr><td>0次或无数次</td><td>*</td><td>星空无数或什么都看不见</td></tr><tr><td>1次或无数次</td><td>+</td><td>+1</td></tr><tr><td>特定次数</td><td>{x}, {min, max}</td><td>区间</td></tr></tbody></table><p>特定次数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- &#123;x&#125;: 恰好x次  <br>- &#123;min, max&#125;： 介于min次到max次之间  <br>- &#123;min, &#125;: 至少min次  <br>- &#123;0, max&#125;： 至多max次  <br></code></pre></td></tr></table></figure><h3 id="位置边界">位置边界</h3><p>对于正则的匹配，我们可以指定匹配的开始和结束位置</p><table><thead><tr><th>边界和标志</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>单词边界</td><td>\b</td><td>boundary</td></tr><tr><td>非单词边界</td><td>\B</td><td>not boundary</td></tr><tr><td>字符串开头</td><td>^</td><td>左上角</td></tr><tr><td>字符串结尾</td><td>$</td><td></td></tr><tr><td>多行模式</td><td>m标志</td><td>multiple of lines</td></tr><tr><td>忽略大小写</td><td>i标志</td><td>ignore case, case-insensitive</td></tr><tr><td>全局模式</td><td>g标志</td><td>global，多次匹配而非单次</td></tr></tbody></table><p>说明：标志通常是作为独立参数，比如：</p><ul><li>JAVA中<code>Pattern.compile(String regex, int flags);</code></li><li>JavaScript中<code>str.replace(/(ab)c/g, 'a');</code></li></ul><h3 id="子表达式">子表达式</h3><h4 id="分组">分组</h4><ul><li>子表达式可以通过<code>()</code>进行分组</li><li>对于分组的表达式我们可以使用<code>\1</code> <code>\2</code>…的形式来引用，<code>\0</code>表示引用整个表达式</li><li>在替换字符串时，语法上有些许区别，用$1,$2…来引用要被替换的字符串。<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：Hello what what is the first thing, and I am am scq000.<br><br>正则：\b(\w+)\s\1<br><br>匹配结果：<br>what what<br>am am<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657101324476_0.png" alt="image.png"></p><ul><li>子表达式可以通过<code>(?:regex)</code>避免进行分组，也就是说分组时会跳过此表达式不编号<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：ab abb aab<br><br>正则：(?:a)(b)\1<br><br>匹配结果：<br>abb<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657117291432_0.png" alt="image.png"></p><h4 id="回溯引用">回溯引用</h4><ul><li>前向查找<br>前向查找(lookahead)是用来限制后缀。以 <code>(?=regex)</code> 包含的子表达式，从子表达式的位置开始<strong>向前</strong>查找符合规则的字串。<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：happy happily<br><br>正则：happ(?=ily)<br><br>匹配结果：()中的内容不被匹配<br>happ(ily)<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657116520443_0.png" alt="image.png"></p><ul><li>后向查找<br>后向查找(lookbehind)是用来限制前缀。以 <code>(?&lt;=regex)</code> 包含的子表达式，从子表达式的位置开始<strong>向后</strong>查找符合规则的字串。<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：apple people<br><br>正则：(?&lt;=ap)ple<br><br>匹配结果：()中的内容不被匹配<br>(ap)ple<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657116279837_0.png" alt="image.png"></p><table><thead><tr><th>回溯查找</th><th>正则</th><th>记忆方式</th></tr></thead><tbody><tr><td>引用</td><td>\0,\1,\2 和 $0, $1, $2</td><td>转义+数字</td></tr><tr><td>非捕获组</td><td>(?:)</td><td>引用(:)</td></tr><tr><td>前向查找</td><td>(?=)</td><td>后缀(=)</td></tr><tr><td>前向负查找</td><td>(?!)</td><td>后缀(!=)</td></tr><tr><td>后向查找</td><td>(?&lt;=)</td><td>&lt;左括号，前缀(=)</td></tr><tr><td>后向负查找</td><td>(?&lt;!)</td><td>&lt;左括号，前缀(!=)</td></tr></tbody></table><h2 id="参考资料-3">参考资料</h2><p><a href="https://juejin.cn/post/6844903845227659271">正则表达式不要背</a><br><a href="https://dzone.com/articles/abc-of-regex">The ABCs of RegEx</a></p><p>工具：<br><a href="https://regex101.com/">正则在线测试</a><br><a href="regexper.com">正则状态机生成</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Switch试玩版免费游戏介绍测评</title>
    <link href="/posts/202201211327796874/"/>
    <url>/posts/202201211327796874/</url>
    
    <content type="html"><![CDATA[<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/2991657873587_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/2961657873584_.pic.jpg" alt=""></div></div></div><blockquote><p>声明：文章中所有图片视频均来自我的Switch截图。</p></blockquote><h2 id="超多图预警！！！">超多图预警！！！</h2><p class="note note-warning"><b>超多图预警！！！</b></p><p class="note note-warning"><b>超多图预警！！！</b></p><p class="note note-warning"><b>超多图预警！！！</b></p><h2 id="前言：">前言：</h2><p>Switch游戏分为实体卡带和数字两种版本，试玩游戏全是通过网络在eshop官网下载的数字DEMO版获得，试玩所以是<code>免费</code>的。鉴于数字版下载网速等原因，本篇文章旨在帮助大家列出试玩游戏名单，并且介绍测评游戏的试玩体验。为大家提前踩坑，标注出试玩游戏的价值。</p><p>如果通过试玩可以帮助大家了解是否入坑一款游戏，从而理性消费，我觉得是很不错的。毕竟盲目地入完一堆游戏却不点开几个，或者新买的游戏才玩开头就弃坑，这些现象还是存在的！</p><p>当然如果部分游戏只保留试玩版，也能给玩家很好的体验，那这免费的福利还是挺香的！</p><p>另外<strong>Switch国行玩家就暂时不用看了</strong>😂</p><hr><h2 id="速览：强烈推荐">速览：强烈推荐</h2><p>请目录跳转看详情，暂不分先后！<br>🤩 【2】塞尔达无双 灾厄启示录<br>🤩 【9】皮克敏3 豪华版<br>🤩 【19】怪物猎人 崛起<br>🤩 【21】精灵与森林<br>🤩 【22】勇者斗恶龙11S 追觅逝去的时光<br>🤩 【26】勇者斗恶龙：创世小玩家2</p><hr><p class="note note-info">备注：由于eshop各区有差异，精力所限，以下游戏只标注我试玩时的下载区信息，其他区可能有也可能没有！非中文区eshop请搜索中文标题下的游戏名！</p><h2 id="【1】世界游戏51大全">【1】世界游戏51大全</h2><p>51 Worldwide Classics<br><span class="label label-primary">DL: 港区</span></p><p>这是一个小游戏合集的游戏，本来想白嫖一个德州扑克，可惜体验版没有。</p><p>试玩版包含了四个游戏：四子棋、骨牌、大富豪、轨道车。1/4支持多人，2/3只能单人。</p><p>四子棋，和五子类似又不一样，棋盘略小而游戏时间短，走棋方式只能选横列。骨牌，有点像小时候的扑克接龙，但它是算分和逃牌兼并，机制更好，不只靠运气。大富豪，牌类游戏，有进贡牌机制，游戏反转机制设计得很好。轨道车，就是商场给儿童玩的轨道车电子版，自己控制加速不让赛车出轨，轨道不多。</p><p>值得一提的是，试玩版51种游戏的规则都可以查看，当说明书也挺不错。如果自己有棋牌道具，可以直接和朋友玩实体了。</p><p>我暂时不会入，试玩版保留。<br><img src="/img/Game/2941657873582_.pic.jpg" alt="世界游戏51大全"></p><h2 id="【2】🤩-塞尔达无双-灾厄启示录">【2】🤩 塞尔达无双 灾厄启示录</h2><p>Hyrule Warriors: Age of Calamity<br><span class="label label-primary">DL: 港区</span></p><p>试玩版包含两三关卡，支持两个人物（林克和和英帕），大概90分钟，我玩完第一关30分钟左右。</p><p>之前史低入过一个海贼无双4，感觉自己不太喜欢这种类型。对比之下，个人觉得塞尔达无双游戏内容更丰富，特效更酷，画面也更好(比不上旷野之息)。手感操作上，没旷野精准，不过无双类型乱斗足矣。节奏偏快，一直打斗，关卡之间会有剧情动画，个人比较喜欢。</p><p>我玩完试玩版就不入了，试玩版保留，没玩过的可以先试玩再决定。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/2971657873585_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/2951657873583_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/2911657873579_.pic.jpg" alt=""></div></div></div><h2 id="【3】马力欧-索尼克在2020东京奥运会">【3】马力欧&amp;索尼克在2020东京奥运会</h2><p>Mario and Sonic at the Olympic Games Tokyo 2020</p><h2 id="【4】2020东京奥运会">【4】2020东京奥运会</h2><p>Tokyo 2020 Olympics<br><span class="label label-primary">DL: 港区</span></p><p class="note note-info">Note: 这两个相关，放一起对比介绍。</p><p>试玩版中，20东奥包含3个游戏：BMX小轮车、乒乓、橄榄球。马索20东奥包含：跨栏、冲浪、空手道、羽毛球、射箭、跳水(马赛克)、跳远(马赛克)。</p><p>20东奥是动漫拟真人物，捏脸自由度较高(另一款捏脸自由度高的是迷托邦，漫画风格，同样有demo)。马索20东奥只开放了4个动漫人物，不能自定义。所以风格上20东奥偏写实，马索20东奥偏卡通。</p><p>游戏上，20东奥全部没体感，马索20东奥部分有体感。个人觉得20东奥的橄榄球好玩，挺新颖。马索20东奥体感体验较差，冲浪还行吧。另外马索20东奥有马赛克游戏，按键反应游戏。流程上，20东奥更长(三局，预/半决/决赛)，马索20东奥较短(比分，换赛直接退到首页，真试玩版啊！)。</p><p>两款都支持本地双人，我只保留20东奥试玩，玩玩橄榄球还行，正好没有FIFA。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/2981657873586_.pic.jpg" alt="20东奥"></div><div class="group-image-wrap"><img src="/img/Game/2931657873581_.pic.jpg" alt="20东奥 - 橄榄球"></div></div></div><p>20东奥⬆️</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3021657873730_.pic.jpg" alt="马索20东奥"></div><div class="group-image-wrap"><img src="/img/Game/3041657873732_.pic.jpg" alt="马索20东奥"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/2921657873580_.pic.jpg" alt="马索20东奥 - 冲浪"></div><div class="group-image-wrap"><img src="/img/Game/3071657873735_.pic.jpg" alt="马索20东奥 - 跳水"></div></div></div><p>马索20东奥⬆️</p><h2 id="【5】特技摩托赛-崛起">【5】特技摩托赛 崛起</h2><p>Trials Rising<br><span class="label label-primary">DL: 港区</span><br>试玩版应该只有6个关卡，可反复刷关。</p><p>这种类型的游戏，最早在4399上玩过，后来是手机上，本来以为和那种小游戏一样，没想到还是有惊喜。</p><p>首先画面很赞，白天黑夜的景色都挺不错，夜晚条件下摩托有车灯，细节还是挺不错。操作难度中上，玩得好的话可以追求速度的同时加高难度动作。关卡设计挺不错，比我之前玩的同类型好很多，主要是赛道内容丰富，看选关界面应该是融入世界各地实景作为赛道背景。有些地方本没有路，但当你靠近时会通过爆炸立马生成路，考验操作，还会给人一种惊奇的感受。节奏偏快，不同于慢节奏过障碍的类型。</p><p>看介绍正式版的有180个关卡，史低标准版20多，黄金版40多，我准备蹲史低入了。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3061657873734_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3001657873728_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3031657873731_.pic.jpg" alt=""></div></div></div><h2 id="【6】王牌钓手">【6】王牌钓手</h2><p><span class="label label-primary">DL: 港区</span><br>试玩版只能玩4分多钟，玩完重进是一样的内容，只有街机模式投币，可反复刷关。</p><p>体感操作，只支持jay-con，说实话体感还不如奥德赛的钓鱼好玩，这款的震动感觉不到什么时候鱼会跑掉。当然鱼的种类是要丰富得多的。<br>插句题外的，钓鱼类我之前入过终极钓鱼模拟(史低10块多)，拟真操作，比较适合成年人，可惜没有震动，不支持体感。</p><p>这款我删掉了！有小孩的可以试下。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3011657873729_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3051657873733_.pic.jpg" alt=""></div></div></div><h2 id="【7】胡闹搬家">【7】胡闹搬家</h2><p>Moving Out<br><span class="label label-primary">DL: 港区</span><br>试玩包含1个教学关，3个正常关，支持1-4人。没玩过胡闹系列的可以先试试，没朋友的试玩就不用下载了🐶。</p><p>多人合作游戏，同样是胡闹系列，对比下，搬家是一代作品，估计和同期厨房1类似，比不上厨房2，主要是画面精细度，操作手感(比厨房2还飘，但这类游戏就是要飘让你心急出错)。但是搬家单个关卡的图会略大，毕竟也算越障游戏，感觉单张图的趣味比厨房好，破坏感也拉满，胡闹拆家😂</p><p>自去年中旬入坑switch后，已经双人三星通关了胡闹厨房2，目前史低入了DLC还没玩完，这种游戏真就多一个人，多一份快乐。有趣的部分多多：思考团队分工，手残操作，玩家互怼，通关成就感等等。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3111657873840_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3131657873842_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3151657873844_.pic.jpg" alt=""></div></div></div><h2 id="【8】第一次的游戏程序设计">【8】第一次的游戏程序设计</h2><p>Game Builder Garage<br><span class="label label-primary">DL: 港区</span><br>试玩版只包含一个追逐游戏的指导关卡，估计10min，将在游戏交互对话的指导下做完追逐游戏，相当于入门指南。</p><p>我本来以为是个益智儿童游戏，没想到还挺创意。当然试玩版开放太少也玩不出啥创意。真正能玩创意的要去正式版的自由编程模式，自己设计游戏。</p><p>说下类比的，apple上有playgrouds，对比下，个人觉得apple适合学编程(培养编程思维)，ns的适合成年人发挥创意设计小游戏(天马行空的玩)。ns的这款相当于提供了各种现成的实体组件、条件，你只需要思考如何组合就能完成一个游戏。</p><p>我自己是不会玩的，毕竟本行了👩🏼‍💻，真想搞就自己拉开源组件搞，可操作性更大。有孩子的或者不打算学编程又想做游戏的可以体验下。</p><p>说句题外的，如果老任开放自己游戏下的组件数据(前提是代码可扩展性高，高度配置化)，指不定能行业革命，全新的生态呀！嗯嗯～想想就好，那是不可能的。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3101657873839_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3161657873845_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/v2-1e19d022fb4d22355937b8761e973b37_1440w.jpeg" alt=""></div></div></div><h2 id="【9】🤩-皮克敏3-豪华版">【9】🤩 皮克敏3 豪华版</h2><p>Pikmin 3 Deluxe<br><span class="label label-primary">DL: 港区</span><br>试玩版包含三天的任务，估计一个小时左右的游玩时间，支持双人！</p><p>一款3D冒险策略游戏，打怪榨果汁。我上一个喜欢的外星冒险游戏是《银河历险记3》，但那款是2D画风，偏解谜风格。</p><p>这款画面中上(我只用了掌机，画质不算最优，但比之前塞尔达无双好)，但是画风很不错，小人国的感觉，而且外星主题，会有一些奇妙的生物，挺治愈的。操作上还是比较容易，框选这种鼠标更方便操作，手柄也能很好操作。前期估计都是探险，后期估计偏重策略，比如多线并进完成任务，因为有时间限制(机制上是白天活动夜晚休息)。</p><p>种草了，我打算空的时候入个卡带，通关回血。不确定自己是否喜欢策略类的可以先试玩，不需要玩家自己战斗，属于冒险解谜策略多元元素的游戏。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3081657873837_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3141657873843_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3091657873838_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3121657873841_.pic.jpg" alt=""></div></div></div><h2 id="【10】一起开火车">【10】一起开火车</h2><p>Unrailed<br><span class="label label-primary">DL: 港区</span><br>居然是小破站开发的游戏，类似胡闹系列，分手火车😂。</p><p>试玩版包含两个火车站，大概10分钟吧，不过可以切换难度，而且地图每次是随机的，可以重刷，但不能保存，不能升级火车。</p><p>合作策略类型。像素画风，复古清新感。需要玩家建造铺设铁轨使火车到达下一个火车站。而火车是开动状态的，也就是有时间紧迫性(火车到断轨处爆炸，GG)。特点是有天气系统，有白天黑夜，有npc搞破坏(偷材料)，可以升级火车，所以游戏机制设计得还不错，难度后期肯定上去了。地图随机生成的，无尽模式可以一直玩下去！这种游戏多人重点在于分工合作，提前规划。</p><p>游戏支持1-4，或者分组对抗，妥妥的聚会游戏。值得一提的是，单人模式下可以给pc伙伴命令，所以就算单人也很好玩，pc的操作估计比真人好(没感情，不会乱)。</p><p>不知道是否适合自己的，可以下载尝试下。我准备蹲个巴西史低，10块入还是不错。</p><p>说个题外的，这种类型的游戏，我的技巧是，提前分工规划，及时沟通互补。双人的重点在于相互沟通，三人的时候就需要有一个指挥者，负责指挥协调。真就多一个人，多一点乱，不过欢乐也多一份。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3171657873957_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3251657873965_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3231657873963_.pic.jpg" alt=""></div></div></div><h2 id="【11】耀西的手工世界">【11】耀西的手工世界</h2><p>Yoshi’s Crafted World<br><span class="label label-primary">DL: 港区</span><br>老任的第一方总是让你感叹创意真好。</p><p>试玩版包含一个关卡，大概10多分钟，支持1-2人。</p><p>这是一款3D横版闯关，解谜收集游戏。支持单/双人。游戏也是小人国的画风，很可爱，画质不错。用折纸板来作为构建元素，毛绒做人物，看上去质感不错，而且这种材质给你一种接近真实生活的感觉，也就更能让你沉浸在其中。操作上很顺手，有手残模式和正常模式选择。关卡设计上，主要是通过折纸来呈现一个微观世界，会让你觉得有创意。</p><p>我暂时不会入，但是耀西发射蛋时候的叫声真可爱呀！我会保留试玩版的！</p><p>插句题外的，国内常见的VR其实不够沉浸，原因在于你的肉眼能分辨出那是在屏幕里，不是真实的。而环球影城之所以好玩，很大一部分在于实物场景的打造。通过布置一部分实物场景，再加上VR技术，再让你坐上多D的座椅，一般是类似迷你过山车一样的，切换几个场景。当你处在这样的环境中，你就没那么容易一眼看穿，也就让你觉得仿佛真的置身电影的场景中，真是相当惊奇的体验。当然两者成本不一样，但如有机会大家可以去体验下。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3191657873959_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3201657873960_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3221657873962_.pic.jpg" alt=""></div></div></div><h2 id="【12】灵活脑学校">【12】灵活脑学校</h2><p>Big Brain Academy: Brain vs. Brain<br><span class="label label-primary">DL: 港区</span><br>试玩只包含3种类型，每种类型一个关卡，限时60秒，可以反复刷。支持1-4人，多人模式是每个人独自完成关卡，最后算总分排名。</p><p>可以捏小人，极简漫画风格的那种。但试玩并不是全开放道具。介绍说正式版有300种搭配，试玩估计不超过100种。喜欢diy卡通小人还是可以尝试试玩版。</p><p>益智类游戏，思维锻炼，开发大脑。适合亲子游玩，或者喜欢自我挑战的朋友。越高等级越难，注重短时思考反应。感觉比较偏开发右脑。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3181657873958_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3341657874090_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3331657874089_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3241657873964_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3211657873961_.pic.jpg" alt=""></div></div></div><h2 id="【13】东方咒术泡泡">【13】东方咒术泡泡</h2><p>Touhou spell bubble<br><span class="label label-primary">DL: 港区</span><br>首先声明非粉，大IP了解不多，只说下这个试玩吧</p><p>试玩版支持1-2人，游戏机制可自定义。单人模式电脑对战，4个难度。试玩只有两首音乐，两个人物(博丽灵梦，雾雨魔理沙，不知道是否原配，声音还不错)，分别只有一个技能。可重复刷。</p><p>一款音乐节奏的泡泡消除竞技游戏。游戏机制看上去还挺丰富，有多种特殊泡泡，人物有不同技能，有特殊的觉醒和反击机制，可以干扰对手泡泡，支持音乐节拍连击等。</p><p>我平时对泡泡消除并不感冒，但试玩下来，音乐好听，游戏机制也不错。我保留试玩版了，正式版就不入了，史低也略贵。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3301657874086_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3281657874084_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3291657874085_.pic.jpg" alt=""></div></div></div><h2 id="【14】方根胶卷">【14】方根胶卷</h2><p>Root Film</p><h2 id="【15】搭档任务-秘密搜查组">【15】搭档任务 秘密搜查组</h2><p>バディミッション BOND</p><h2 id="【16】AI-梦境档案">【16】AI 梦境档案</h2><p>AI: THE SOMNIUM FILES<br><span class="label label-primary">DL: 港区</span>，三部都是</p><p class="note note-info">无剧透，放心食用！这三个相同类型的放在一起介绍</p>三部试玩版都是一个小时左右吧，全线通关大概15-20H。这类游戏试玩肯定是玩不下去的，推荐喜欢这种类型的朋友先下试玩感受后，再决定自己入哪一个。(全要也不是不可以🤔)<p>同是文字悬疑冒险游戏(还有一部经典是逆转裁判，无试玩)。三部画质都不错，个人认为：</p><ul><li>画面效果排名:梦&gt;搭&gt;方，梦是3D，画风偏暗黑，搭为动画，方为漫画，画风正常。</li><li>语音，三部对话都有真人配音(逆转没有配音)。</li><li>操作上，梦部分场景可第一/三人称操作，搭和方就是普通平面操作。</li><li>游戏机制，梦和搭为多线多结局，方不清楚。梦的模式比较创新，有双空间的映射(我也不知道咋描述🤔)，相当于给玩家更多的观察面。</li><li>故事性强弱的话，我也不清楚了。</li></ul><p>我目前已入梦境和逆转裁判123，梦境港服史低70多入的，波兰隔一周背刺😭(史低35)，梦境20h通关。逆转才入，才过第一个案子。其他的应该看情况，首先考虑卡带了。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3321657874088_.pic.jpg" alt="方根胶卷"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3311657874087_.pic.jpg" alt="方根胶卷"></div><div class="group-image-wrap"><img src="/img/Game/3271657874083_.pic.jpg" alt="方根胶卷"></div></div></div><p>方根胶卷⬆️</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3261657874082_.pic.jpg" alt="搭档任务 秘密调查组"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3371657874134_.pic.jpg" alt="搭档任务 秘密调查组"></div><div class="group-image-wrap"><img src="/img/Game/3381657874135_.pic.jpg" alt="搭档任务 秘密调查组"></div></div></div><p>搭档任务 秘密调查组⬆️</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3401657874137_.pic.jpg" alt="AI 梦境档案"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3411657874138_.pic.jpg" alt="AI 梦境档案"></div><div class="group-image-wrap"><img src="/img/Game/3421657874139_.pic.jpg" alt="AI 梦境档案"></div></div></div><p>AI 梦境档案⬆️</p><h2 id="【17】前进，奇诺比奥队长">【17】前进，奇诺比奥队长</h2><p>Captain Toad: Treasure Tracker<br><span class="label label-primary">DL: 港区</span><br>试玩版支持三个关卡，前两关都比较短，第三关略长，内容也丰富些，大概10分钟左右的试玩内容吧。支持1-2人。</p><p>一款经典箱庭式3D解谜游戏，有收集属性。这类题材算是老任的拿手好作。画风超级可爱，画质也不错。小队长的头灯可以手动开关，这个小细节我喜欢。游戏操作上，我感觉除了小队长击打敌人不是很好操作，其他的都没得挑。X键支持镜头视角两段放大，这样一些细节也能看得更清楚，截图也有多样选择。</p><p>我目前不会入，后期考虑卡带回血。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3361657874133_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3391657874136_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3351657874132_.pic.jpg" alt=""></div></div></div><h2 id="【18】小小梦魇2">【18】小小梦魇2</h2><p>Little Nightmares II<br><span class="label label-primary">DL: 港区</span><br>试玩版可以玩半个小时左右，只能单人游玩(反正我是不会一个人玩的)。胆小的可以入试玩，这样即使玩不下去也没关系😂</p><p>恐怖冒险解谜游戏，横版闯关类型(也不全是2D平面，3维方向都可以移动)。画风偏暗黑，音乐+恐怖的画面，再把震动传到手柄上，氛围感拉满！画质正常吧，掌机画面略糊！操作还可以，不会顿。</p><p>年前史低10块入过囚禁，同类型游戏，无试玩。但梦魇更加恐怖些！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3491657874249_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3511657874251_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3431657874243_.pic.jpg" alt=""></div></div></div><h2 id="【19】🤩-怪物猎人-崛起-DEMO-V2">【19】🤩 怪物猎人 崛起(DEMO V2)</h2><p>MONSTER HUNTER RISE<br><span class="label label-primary">DL: 港区</span><br>试玩版有30次猎龙次数，每次50min。有三种困难类型的龙可猎杀。带有两个训练任务，不消耗次数。通过删除游戏存档数据(不是删游戏)的方法可以重置30次数，也就可以无限刷。</p><p>这是一款第三人称的动作冒险游戏，玩家需要扮演猎人，猎杀各种各样的怪物，主要是龙。画质我觉得挺不错，我试玩的时候没有卡顿的情况，不知道战斗场面元素多起来是否会掉帧！游戏操作，顺滑度还是挺不错，我用掌机，能很好操作，上手的话我只能说有难度，新手上来就猎龙有点茫然！应该多玩几次会好点！</p><p>第一次玩这游戏，我觉得有一定门坎！一个是游戏中道具比较多，画面上图标指示也略多。还有就是按键操作比较复杂，所有的肩键都会常用。如果入正式版应该会好点，因为试玩版教程过后就直接开始猎龙，操作没那么快熟悉。而且不同兵器的猎人操作上略有区别。</p><p>给几点提示：</p><ol><li>选项菜单通过左手柄的方向键才能控制；</li><li>持刀剑和持弓箭的猎人，打斗操作略有不同。(教程里面有提示，我看了就忘了，结果换个角色发现一通操作不能御龙)；</li><li>怪物是没有血条的，只能打死它才知道。</li></ol><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/v2-00f7a9f72486c7b5f1b7dc58fbbed699_1440w.jpeg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/v2-6224be24e270f912d0443090f5f188c4_1440w.jpeg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/v2-0d1912ff4baa6e063c43e8225f3aaf04_1440w.jpeg" alt=""></div></div></div><h2 id="【20】躲避球大冒险-豪华版">【20】躲避球大冒险 豪华版</h2><p>Stikbold! A Dodgeball Adventure DELUXE<br><span class="label label-danger">DL: 日区</span></p><p>试玩版包含3个关卡，支持1-4人。可合作，可对抗。聚会游戏，会带来很多欢乐的那种！</p><p>这是一款合作竞技动作游戏，玩家需要用球打到对手身上，让对手出局。和《间谍过家家》第10集中的躲避球赛一样，在中国有点像小时候玩的扔野鸭子游戏，或者叫扔沙包。</p><p>游戏画风简洁，类马赛克，但画质不错。操作顺滑，只是扔球方向不好把控，如果能有一个扔球方向指示估计会好些。游戏元素也设计得很多，除球外有多类的可攻击物体，比如马蜂窝，砖头等。游戏机制也挺多样的，会设计很多元素给玩家制造麻烦，基本上是需要躲避对手的攻击同时，还要避免自己踩入陷阱。</p><p>这款游戏史低10块左右，我蹲了很久还没蹲到，史低了我肯定要入的。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3501657874250_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3481657874248_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3461657874246_.pic.jpg" alt=""></div></div></div><h2 id="【21】🤩-精灵与森林-决定版">【21】🤩 精灵与森林 决定版</h2><p>Ori and the Blind Forest: Definitive Edition<br><span class="label label-info">DL: 美区</span><br>试玩版包含三个门的关卡，大概可以玩一个小时左右(也得看手残程度，一两个小时吧)，有故事情节的开场动画，效果很赞！</p><p>这是一款闯关类型的动作跳跃类游戏，需要玩家自行探索地图。画质很好，美术精美，很治愈的画风，游戏配乐也很不错，整体搭配下来，很符合奇幻森林的主题。游戏操作顺滑，不卡顿，但是通关对于手残玩家会有一定难度。</p><p>同类型的游戏，我史低入过空洞骑士，但感觉空洞的难度应该更高。所以暂时不会入这款，但还是可以保留试玩，画面真是很美，每一帧都是壁纸。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3471657874247_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3451657874245_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3441657874244_.pic.jpg" alt=""></div></div></div><h2 id="【22】🤩-勇者斗恶龙11S-追觅逝去的时光">【22】🤩 勇者斗恶龙11S 追觅逝去的时光</h2><p>DRAGON QUEST XI S: Echoes of an Elusive Age - Definitive Editio<br><span class="label label-primary">DL: 港区</span><br>试玩版可以玩10个小时左右(包含剧情时长，不卡关不闲逛不做小任务大概四个小时吧)，对的，你没看错，感觉是试玩时间最长的Demo！试玩的存档支持延续到正式版中，但是试玩不支持2D模式。大概提示下一直可以玩到四人组队前往下个地区之前。</p><p>这是一款日式RPG动作冒险游戏（回合制战斗）。游戏画面效果一般吧（剧情动画的画面比游戏略好），感觉人物勾线比较重，画面细节不足，画风还是挺治愈可爱的。游戏操作还算顺滑吧，转动视角略慢，移动方向也不够精准（有类似独木桥的窄路会限制不掉下去的），但回合制战斗，操作上不需要太复杂，所以整体可以接受。</p><p>回合制策略战斗，可以指挥队友攻击防御等，整体的战斗升级体系还是有一定内容，需要花时间琢磨。动画剧情还是很棒的，很经典的王者番套路吧，游戏音乐也很有特色，交响乐配合剧情很好烘托出了恢宏悲壮柔情温馨的氛围。值得一提的是，正版游戏可以随意切换到2D模式，算是怀旧情怀。</p><p>我在没玩完试玩版前不会入正式版的，回合制的打斗我并不喜欢，但配合剧情还是能玩进去游戏的，不知道整体是否可以轻打斗（前期一直避开非必要战斗，目前卡在捣蛋怪，估计等级太低还得刷怪）。推荐没玩过的朋友先试下，按情况决定！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3521657874299_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3551657874302_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3531657874300_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3541657874301_.pic.jpg" alt=""></div></div></div><h2 id="【23】队长小翼：新秀崛起">【23】队长小翼：新秀崛起</h2><p>Captain Tsubasa: Rise of New Champions<br><span class="label label-primary">DL: 港区</span><br>试玩版包含四只队伍，支持1-4人，电脑AI最大三星难度，半场时间支持5-20min。可管理队伍，可中场换人，可重复刷！</p><p>一款休闲足球游戏(漫改，可惜没看过)，游戏画质不算太好，特效镜头比较炫酷。操作上比较简单，盘带过人一键操作，射门的话感觉可控角度不多。游戏本身不是FIFA那种拟真游戏，所以太不用在意足球的规则性。</p><p>我觉得没有足球类游戏的，可以保留试玩版。虽然操作较简单，但还是有一定可玩性。另外镜头可以在进比赛前调整为广角，方便看全场。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3581657874378_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3641657874384_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3601657874380_.pic.jpg" alt=""></div></div></div><h2 id="【24】健身拳击2">【24】健身拳击2</h2><p>Fitness Boxing 2: Rhythm &amp; Exercise<br><span class="label label-primary">DL: 港区</span></p><p class="note note-warning">试玩版没有热身活动，建议玩家根据自己体质酌情游玩！虽然是游戏，但对于长期不运动的同学也算剧烈运动！</p><p>试玩版包含10次自由训练(单次3-12min)，3次每日训练，全九位教练(服饰自定义少)，两个动作(直拳，勾拳)。通过删除游戏存档数据(不是删游戏)的方法可以重置次数，也就可以无限刷。</p><p>这是一款体感健身游戏，游戏只能通过jay-con手柄操作。有良好的入门教程，对于每个动作都有解析。switch的体感都是大体准确，不会很精准的那种，当然这类游戏本身也不需要十分精准的操作，所以对于动作的判定是够用的！正式版游戏可以制定每天的训练计划，可自定义项目时长，长期坚持肯定可以锻炼减肥的。游戏还支持切换九位不同的健身教练，对教练服饰进行自定义，当然需要游戏经验来解锁道具，也算一种激励方式吧。</p><p>试玩版我保留了，正式版就不入了。目前手上已经有20和22的舞力全开，还有才入不久的二手健身环，体感健身游戏足够了。除了拳击，其他的无试玩，所以没有这类游戏的同学可以尝试下拳击。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3561657874376_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3621657874382_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3611657874381_.pic.jpg" alt=""></div></div></div><h2 id="【25】疯狂伐木工VS">【25】疯狂伐木工VS</h2><p>Timberman VS<br><span class="label label-info">DL: 美区</span><br>试玩版只支持一个模式，支持1-2人(正式版1-4人)。单人为挑战模式，砍树增加时间，时间走完即结束。双人模式下，领先另外一方20斧头即结束。背景自动切换，支持两个人物。</p><p>一款像素风格动作小游戏，主要是考验按键反应。被树枝打到就中断游戏。游戏简单但上头，节奏快时间短！属于合家欢游戏里面上手最快的了。</p><p>试玩版保留了，这款我蹲了很久史低1块都没，我就不信蹲不到！继续蹲！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3631657874383_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3591657874379_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3571657874377_.pic.jpg" alt=""></div></div></div><h2 id="【26】🤩-勇者斗恶龙：创世小玩家2">【26】🤩 勇者斗恶龙：创世小玩家2</h2><p>DRAGON QUEST BUILDERS 2<br><span class="label label-primary">DL: 港区</span><br>试玩版包含10个小时的内容，可以玩到大树建完，打蒙佐拉岛的大BOSS之前，接近五分之一的游戏剧情内容了。想建造的玩家建议到第二个岛解锁更多组件再建！试玩版开放的全部建造类组件我在下面贴图吧TODO。</p><p>一款“类像素”风格的RPG游戏，同是也是自由度高的建造类游戏，还是模拟经营类的种田游戏。</p><ul><li>游戏画质还算不错，类像素风主要是建筑类的元素，人物道具其实不是像素风格。</li><li>游戏配乐就不用不多说了，DQ大IP，还是那些熟悉好听的音乐。</li><li>游戏的主线剧情其实就算是建造种田部分的指导，所以当你主线玩完，你就已经解锁在这个游戏世界创造一切的所有技能。也可以认为主线剧情通关，这个创造类的游戏就正式开始了，哈哈😃！</li><li>游戏机制上，我觉得很好的是，NPC会随主角一起成长。当整个村落等级提升，你会发现一些低级重复度高的工作由NPC为你代劳了。而你只需要关注你感兴趣的部分就行。你的村民也会给你提各种要求，你完成要求，他们就更满意，整个村落再升级。而且NPC的设定还是相当有趣的，对话内容调皮可爱！</li></ul><p>试玩版绝对值得保留！剁手预警！存档支持继承到正式版(卡带数字均可)！正式版价格略贵，我应该入卡带。还有一点需要关注，这游戏后期东西多了肯定会卡！</p><p>给几个提示：</p><ol><li>游戏剧情为单线，任务一个一个挨着做；</li><li>建造给NPC的房屋为长(正)方形才会判定；</li><li>如果网不好，公告栏联网的时候先手动保存，不然游戏崩溃了会丢一部分进度。</li></ol><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3721657874418_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3671657874413_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3691657874415_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3711657874417_.pic.jpg" alt=""></div></div></div><h2 id="【27】密特罗德-生存恐惧">【27】密特罗德 生存恐惧</h2><p>Metroid Dread<br><span class="label label-primary">DL: 港区</span><br>试玩版大概可以玩一个小时左右，到打完第二个EMMI为止。试玩版不能在存档点保存。</p><p>一款银河城类型的2D动作冒险游戏。整体画质不错，背景内容比较丰富。大部分游戏过程为2D，过场动画为3D，部分打斗场景为3D。游戏音乐声效很丰富，震动反馈不错。按键操作比较复杂，可以在2D平面360度控制射击方向，操作手感顺滑。游戏机制上，因为有EMMI角色(武力比你强，跑得比你快)，所以会比较偏快节奏，玩家需要躲避追踪的同时找路。</p><p>试玩保留，正式暂时不入。不确定自己是否喜欢可以先试玩，如果手残可能试玩版都得玩好久。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3661657874412_.pic.jpg" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Game/3701657874416_.pic.jpg" alt=""></div><div class="group-image-wrap"><img src="/img/Game/3651657874411_.pic.jpg" alt=""></div></div></div>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>Switch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Game</tag>
      
      <tag>Nintendo</tag>
      
      <tag>Switch</tag>
      
      <tag>Demo</tag>
      
      <tag>试玩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch入门</title>
    <link href="/posts/201802021020867394/"/>
    <url>/posts/201802021020867394/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning">版本提示：本文涉及的ES版本为5.4</p><h2 id="1-简介">1. 简介</h2><p>Elasticsearch是一个实时分布式搜索和分析引擎，它让你已前所未有的速度处理大数据成为可能。它用于全文搜索，结构化搜索，分析以及将这三者混合使用。<br>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目的是使全文检索变得简单， 通过隐藏 Lucene 的复杂性，取而代之的是提供一套简单一致的 RESTful API。</p><p>Elasticsearh可以被这样形容：</p><ul><li>一个分布式的实时文档存储，每个字段可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><hr><h2 id="2-核心元素">2. 核心元素</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_finding_your_feet.html">快速入门Demo</a></p><ul><li>面向文档（document oriented）：Elasticsearch是面向文档的，它可以存储整个对象或文档。它不仅仅是存储，还会索引每个文档的内容。文档是不可变的：他们不能被修改，只能被替换。Elasticsearch使用JSON作为文档序列化格式。类比传统关系数据库：</li></ul><table><thead><tr><th>类比</th><th>项1</th><th>项2</th><th>项3</th><th>项4</th></tr></thead><tbody><tr><td>Relational DB</td><td>Databases</td><td>Tables</td><td>Rows</td><td>Columns</td></tr><tr><td>Elasticsearch</td><td>Indices</td><td>Types</td><td>Documents</td><td>Fields</td></tr></tbody></table><hr><h2 id="3-地心历险">3. 地心历险</h2><h3 id="3-1-关于分布式">3.1 关于分布式</h3><ul><li><p><strong>集群和节点</strong>：节点（node）是一个运行着的Elasticserach实例。集群（cluster）<a href="http://xn--cluster-4t3kq1x40gf39c2eccv7fl2w.name">是一组具有相同cluster.name</a>(配置在<code>./config/elasticsearch.yml</code>文件)的节点集合，他们协同工作，共享数据并提供故障转移和扩展功能，当然一个节点也可以组成一个集群。当加入新节点或者删除一个节点时，集群就会感知到并平衡数据。</p></li><li><p><strong>主节点</strong>：集群中一个节点会被选举为主节点，它将临时管理集群级别的一些变更，例如新建或删除索引、增加或移除节点等。主节点不参与文档级别的变更或搜索，这意味着在流量增长的时候，主节点不会成为集群的瓶颈。</p></li><li><p><strong>节点</strong>：任何节点都可以成为主节点，我们可以和集群中任何节点通信。每个节点都知道文档存在于哪个节点上，它们可以转发请求到相应的节点上。我们访问的节点负责收集各节点返回的数据，最后一起返回给客户端。这一切有Elasticsearch处理。</p></li><li><p><strong>分片（Shard）</strong>：索引只是一个用来指向一个或多个分片的“逻辑命名空间（logical namespace）”。一个分片是一个最小级别的工作单元，它只保存了索引中所有数据的一部分。分片是Elasticsearch在集群中分发数据的关键。文档存储在分片中，然后分片分配到你集群中的节点上。当你的集群扩容或缩小，Elasticsearch将会自动在你的节点中迁移分片，以使集群保持平衡。<br>分片有两种类型：<strong>主分片（primary shard）</strong> 或者是 <strong>复制分片（replica shard）</strong>。索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档。复制分片与主分片不会分配到同一个节点上。文档的索引首先被存储在主分片中，然后并发复制到对应的复制节点上。</p></li><li><p><strong>乐观并发控制</strong>：如果在读写过程中数据发生了变化，更新操作将失败，这时候由程序决定在失败后如何解决冲突。ELasticsearch使用&quot;_version&quot;这个字段（每个文档都有）来保证所有修改都被正确排序。这个字段的值将会在文档被改变时加一。<br>我们可以通过以下请求来保证数据不会因为修改冲突而丢失：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//修改_index=1 且 _version=1的文档</span><br>PUT /myTyte/index/<span class="hljs-number">1</span>?version=<span class="hljs-number">1</span><br><br><span class="hljs-comment">//失败时返回409Http状态码，响应体如下</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;root_cause&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[user][1]: version conflict, current version [7] is different than the one provided [5]&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XBy70gdWTJ6MQMVUCoQC-A&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;shard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[user][1]: version conflict, current version [7] is different than the one provided [5]&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XBy70gdWTJ6MQMVUCoQC-A&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">409</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当然也可以使用外部版本控制系统，一种常见的结构是使用一些其他的数据库作为主数据库，然后使用Elasticsearch搜索数据，当主数据库发生变化，就要拷贝到Elasticsearch中。如果主数据库有版本字段，或者是timstamp等可以用于版本控制的字段，可以在QueryString后加<code>version_type=external</code>来使用这些版本号。外部版本号与内部版本号检查不一样，内部版本号检查相等，外部版本号检查是否小于指定版本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//使用外部版本号</span><br>PUT /myTyte/index/<span class="hljs-number">1</span>?version=<span class="hljs-number">1</span>&amp;version_type=external<br></code></pre></td></tr></table></figure><h3 id="3-2-分布式文档存储">3.2 分布式文档存储</h3><h4 id="路由文档"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-docs.html">路由文档</a></h4><p>通过以下公式决定文档路由到哪一个分片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">shard = hash(routing) % number_of_primary_shards<br></code></pre></td></tr></table></figure><p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过 hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到 余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p><code>consistency</code><br>在默认设置下，即使仅仅是在试图执行一个_写_操作之前，主分片都会要求 必须要有 <code>_规定数量(quorum)_</code>（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行_写_操作(其中分片副本可以是主分片或者副本分片)。这是为了避免在发生网络分区故障（network partition）的时候进行_写_操作，进而导致数据不一致。<code>_规定数量_</code>即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>( (primary + number_of_replicas) / <span class="hljs-number">2</span> ) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>consistency 参数的值可以设为<br><code>one</code> （只要主分片状态 ok 就允许执行_写_操作）;<br><code>all</code>（必须要主分片和所有副本分片的状态没问题才允许执行_写_操作）;<br><code>quorum</code> 。默认值为 <code>quorum</code> ,即大多数的分片副本状态没问题就允许执行_写_操作。</p><blockquote><p>NOTE: 新索引默认有 1 个副本分片，这意味着为满足 规定数量 应该 需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当 number_of_replicas 大于1的时候，规定数量才会执行。</p></blockquote><p><code>timeout</code><br>如果没有足够的副本分片会发生什么？ Elasticsearch会等待，希望更多的分片出现。默认情况下，它最多等待1分钟。 如果你需要，你可以使用 timeout 参数 使它更早终止： 100(ms)，30s。</p><h4 id="取文档"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-read.html">取文档</a></h4><p><img src="/img/post/elas_0403.png" alt="取回单个文档"><br>步骤：协调节点确定文档所属分片，转发请求到相应分片的节点（轮询所有的副本分片来达到负载均衡），返回文档；</p><h4 id="搜索"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/empty-search.html">搜索</a></h4><blockquote><p>GET /_search?timeout=10ms</p></blockquote><p>搜索可以指定超时，在请求超时之前，Elasticsearch 将会返回已经成功从每个分片获取的结果。<br>应当注意的是 <code>timeout</code> 不是停止执行查询，它仅仅是告知正在协调的节点返回到目前为止收集的结果并且关闭连接。在后台，其他的分片可能仍在执行查询即使是结果已经被发送了。<br>使用超时是因为 SLA(服务等级协议)对你是很重要的，而不是因为想去中止长时间运行的查询。</p><p>分布式系统中的<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/pagination.html">深度分页问题</a>，限制查询量不要超过1000；</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/analysis-intro.html">分析与分析器</a><br>索引文本和查询字符串必须标准化为同样的格式。<br>分析器包含三个功能：字符过滤器（例如去除html），分词器（拆分文本为token），Token过滤器（例如转化大小写，同义词关联，转化词根等）</p><p>核心简单域类型：</p><ul><li>字符串 : string</li><li>整数 : byte, short, integer, long</li><li>浮点数: float, double</li><li>布尔型: boolean</li><li>日期: date</li></ul><p>复杂核心域类型</p><ul><li>数组，</li><li>内部对象(object，扁平式键值对结构，问题是对象数组时，缺少字段相关性)，</li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/nested-objects.html">嵌套对象（nested，每一个嵌套对象都会被索引为一个 隐藏的独立文档）</a></li></ul><h3 id="3-3-Modules">3.3 Modules</h3><h4 id="线程池">线程池</h4><p>线程池分为两种：</p><ol><li><code>fixed</code><br>固定线程池拥有固定数量的线程来处理任务，并且自带一个可选有界的队列。<br><code>size</code>参数控制线程数量，默认数量是5。<br><code>queue_size</code>控制队列容量，默认会被设置为-1，表示无界。当有请求到来且队列是满的，请求将会被中断。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">thread_pool:</span><br>    <span class="hljs-attr">index:</span><br>        <span class="hljs-attr">size:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">queue_size:</span> <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>scaling</code><br>可扩展线程拥有动态数量的线程。线程数量和工作负载成比例，且在<code>core</code>和<code>max</code>参数之间变化</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">thread_pool:</span><br>    <span class="hljs-attr">warmer:</span><br>        <span class="hljs-attr">core:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">max:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">keep_alive:</span> <span class="hljs-string">2m</span><br></code></pre></td></tr></table></figure><p>主要的线程池如下：<br><code>generic</code><br>通用操作，比如后台节点的恢复，线程池类型是<code>scaling</code>；</p><p><code>index</code><br>index/delete操作。线程池的类型是<code>fixed</code>，线程数量等于<code>CPU核心数</code>，队列容量为200；</p><p><code>search</code><br>count/search/suggest操作。线程池的类型是<code>fixed</code>，线程数量等于<code>(CPU核心数 * 3) / 2) + 1</code>，队列容量为1000；</p><p><code>get</code><br>get操作。线程数量等于<code>CPU核心数</code>，队列容量为1000；</p><p><code>bulk</code><br>bulk操作。线程数量等于<code>CPU核心数</code>，队列容量为200；</p><hr><h2 id="4-实战">4. 实战</h2><h3 id="4-1-插件">4.1 插件</h3><ul><li>Marvel</li></ul><h3 id="4-2-命令">4.2 命令</h3><ul><li>集群健康</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>集群健康有三种状态：green、yellow、red<br>GET <span class="hljs-regexp">/_cluster/</span>health<br></code></pre></td></tr></table></figure><ol><li><p><code>green</code><br>所有的主分片和副本分片都正常运行。</p></li><li><p><code>yellow</code><br>所有的主分片都正常运行，但不是所有的副本分片都正常运行。</p></li><li><p><code>red</code><br>有主分片没能正常运行。</p></li></ol><h3 id="4-3-基础操作">4.3 基础操作</h3><p>几乎所有操作可以通过http请求来实现<br><code>curl -X$&#123;m&#125; $&#123;url&#125; -d $&#123;json&#125;</code></p><ul><li>索引文档<br>在Elasticsearch中存储数据的行为就叫做索引（indexing）。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求：</span><br>PUT localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oabern&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to go rock climbing&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;programing&quot;</span><br>    <span class="hljs-punctuation">]</span><br> <span class="hljs-punctuation">&#125;</span><br> <br> <span class="hljs-comment">//服务端响应</span><br> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>需要更新文档时只要重新put，此时响应结果中的&quot;_version&quot;会自增。</p><ul><li>局部更新</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /myType/user/<span class="hljs-number">1</span>/_update<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cqcq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;addField&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>文档是不可变的：他们不能被修改，只能被替换。<br>更新操作过程：</p><ol><li>从旧文档构建 JSON；</li><li>更改该 JSON；</li><li>删除旧文档；</li><li>索引一个新文档；<br>将会合并到现有文档中，对象合并在一起，存在的标量字段被覆盖，新字段被添加。<br>更多复杂的局部更新操作可以使用脚本（Groovy）来实现。</li></ol><ul><li>检索文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/<span class="hljs-number">1</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oabern&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to go rock climbing&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;programing&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>其他操作</li></ul><ol><li>删除</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br><span class="hljs-comment">//DELETE localhost:9200/myType/user/1</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>存在</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br>HEAD localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/<span class="hljs-number">1</span><br><br><span class="hljs-comment">//服务端响应（无json）,</span><br><span class="hljs-comment">//存在返回状态码200，</span><br><span class="hljs-comment">//不存在返回状态码404</span><br></code></pre></td></tr></table></figure><ol start="3"><li>获取多个</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_mget<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;docs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>批量操作<br>批量操作可以帮助提供操作性能<br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/bulk.html">代价较小的批量操作</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-multi-doc.html#bulk-format">ES骚操作</a></p></li><li><p>简单搜索</p></li></ul><ol><li><strong>全部搜索</strong></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br><span class="hljs-comment">//查询所有文档</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/_search<br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;miyakee&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to collect rock albums&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;paint&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;ukulele&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//……省略</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>默认返回前10个得分最高的结果。</p><ol start="2"><li><strong>带条件搜索（Query String）</strong></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> localhost:9200/myTyte/user/_search?<span class="hljs-attribute">q</span>=age:21<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>带条件搜索（DSL）</strong></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myTyte/user/_search<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;address.city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rock climbing&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.82252765</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.82252765</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oabern&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to go rock climbing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;programing&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.55510485</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;miyakee&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to collect rock albums&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;paint&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;ukulele&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>默认情况下，Elasticsearch根据结果相关性评分来对结果集进行排序，所谓的「结果相关性评分」就是文档与查询条件的匹配程度。</p><ol start="4"><li><strong>高亮搜索</strong></li></ol><ul><li>分析（聚合Aggregations）</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br><span class="hljs-comment">//统计每个兴趣下的人数，以及平均年龄</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myTyte/user/_search<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;all_interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;interests&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//……省略,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;all_interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;climbing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paint&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;programing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rock&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ukulele&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="5-参考资料">5. 参考资料</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.4/index.html">Elasticsearch Reference</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">Elasticsearch: 权威指南</a><br><a href="http://www.cnblogs.com/duanxz/p/3621404.html">搭建elasticsearch，并同步mysql数据</a><br><a href="http://donlianli.iteye.com/blog/2094305">Elasticsearch搜索类型(query type)详解</a><br><a href="https://www.elastic.co/blog/understanding-query-then-fetch-vs-dfs-query-then-fetch">Understanding “Query Then Fetch” vs “DFS Query Then Fetch”</a><br><a href="https://segmentfault.com/a/1190000002972420">ELK：kibana使用的lucene查询语法</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
      <tag>Elasticsearch</tag>
      
      <tag>大数据</tag>
      
      <tag>Lucene</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mockito2 探索</title>
    <link href="/posts/201612133008866774/"/>
    <url>/posts/201612133008866774/</url>
    
    <content type="html"><![CDATA[<h2 id="简介-3">简介</h2><h2 id="核心元素-3">核心元素</h2><ul><li><p>将mock的底层引擎CGLIB 更改为 ByteBuddy</p></li><li><p>为JAVA8做准备</p></li><li><p>Mockito的Junit runner 和 rule规则器 可以探测不用stubs</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// detect unused stubs</span><br><span class="hljs-meta">@RunWith(MockitoJUnitRunner.class)</span><br><br><span class="hljs-comment">// don&#x27;t detect, old behaviour</span><br><span class="hljs-meta">@RunWith(MockitoJUnitRunner.Silent.class)</span><br></code></pre></td></tr></table></figure><p>or with the rule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// detect unused stubs</span><br><span class="hljs-meta">@Rule</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">MockitoRule</span> <span class="hljs-variable">mrule</span> <span class="hljs-operator">=</span> MockitoJUnit.rule();<br><br><span class="hljs-comment">// don&#x27;t warn user about misusage, old behaviour</span><br><span class="hljs-meta">@Rule</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">MockitoRule</span> <span class="hljs-variable">mrule</span> <span class="hljs-operator">=</span> MockitoJUnit.rule().silent();<br></code></pre></td></tr></table></figure><ul><li><p>对于框架的整合者或高级用户，提供新的API<code>org.mockito.listeners.MockitoListener</code>来探测无用的sutbs</p></li><li><p>新的校验控制器支持懒校验<code>Lazy verification</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Rule</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">VerificationCollector</span> <span class="hljs-variable">collector</span> <span class="hljs-operator">=</span> MockitoJUnit.collector();<br></code></pre></td></tr></table></figure><p>在一个测试方法中，所有的校验都会被执行并报告出来，即使校验报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">IMethods</span> <span class="hljs-variable">methods</span> <span class="hljs-operator">=</span> mock(IMethods.class);<br><span class="hljs-comment">// Both methods are not called, but will be reported at once</span><br>verify(methods).simpleMethod();<br>verify(methods).byteReturningMethod();<br></code></pre></td></tr></table></figure><p>默认的非懒校验的方式，会在<code>simpleMethod</code>停止校验，并不会报告未进行校验的方法<code>byteReturningMethod</code></p><ul><li>More Answers</li></ul><ol><li>Introducing Answers.RETURNS_SELF, which should be useful to mock builders</li><li>Java 8 friendly answers AdditionalAnswers.answer(arg1 -&gt; arg1.toString())</li></ol><ul><li>改善BDDMockito的API</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">BDDMockito.then(mock).should(inOrder).doSomething();<br>BDDMockito.then(mock).shouldHaveZeroInteractions();<br>BDDMockito.then(person).shouldHaveNoMoreInteractions();<br></code></pre></td></tr></table></figure><hr><h2 id="地心历险">地心历险</h2><p>揭示底层的原理</p><hr><h2 id="实战-2">实战</h2><p>实际使用中常用的东西</p><hr><h2 id="参考资料-2">参考资料</h2><p><a href="https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2">What’s new in Mockito2</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Test</tag>
      
      <tag>Mockito</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerMock</title>
    <link href="/posts/201612083509692517/"/>
    <url>/posts/201612083509692517/</url>
    
    <content type="html"><![CDATA[<p><strong>说明</strong><br>本文使用的开发环境为JDK1.8。<br>本文使用的框架版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- junit --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!-- Mockito 2016.8.8目前1.*为稳定版 2.*为beta --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- PowerMock  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.powermock<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>powermock-module-junit4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.powermock<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>powermock-api-mockito<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于PowerMock的版本兼容问题，<a href="https://github.com/jayway/powermock/wiki/MockitoUsage#supported-versions">点击这里查看</a></p><hr><h2 id="简介-5">简介</h2><p>PowerMock可以支持EasyMock和Mockito，作为Mockito的扩展，使用PowerMock可以mock private方法，mock static方法，mock final方法，mock construction方法。PowerMock封装了部分Mockito的API，可以使用Mockito的语法来进行测试代码的编写。</p><p>Basically, PowerMock provides a class called “PowerMockito” for creating mock/object/class and initiating verification, and expectations, everything else you can still use Mockito to setup and verify expectation (e.g. times(), anyInt()).</p><p>All usages require @RunWith(PowerMockRunner.class) and @PrepareForTest annotated at class level.</p><hr><h2 id="核心元素-4">核心元素</h2><p>核心的关键词或者关键知识点</p><hr><h2 id="地心历险（TODO）">地心历险（TODO）</h2><p>揭示底层的原理</p><hr><h2 id="实战-3">实战</h2><h3 id="Tips-2">Tips</h3><ul><li><p>在使用PowerMock时，必须将@RunWith(PowerMockRunner.class) and @PrepareForTest注解到类级别上</p></li><li><p>关于Argument Matcher的使用与Mockito中类似，此处不再赘述！</p></li><li><p>在下面的示例中我们没有使用 ‘import static’，以便大家更好的理解方法属于Mockito还是PowerMockito。但是我们强烈建议你在实际编写测试代码中使用‘import static’，这样的可读性更好！<br>官方原文：</p></li></ul><blockquote><p>In the examples below we don’t use static imports for the method in the Mockito or PowerMockito API for better understanding of where the methods are located. However we strongly encourage you to statically import the methods in your real test cases for improved readability.</p></blockquote><p>个人建议:由于PowerMock封装了Mockito的API，所以同时引入两个框架的static method可能会造成编译器不知道调用哪个方法。因此在使用PowerMock相关的API时，通过‘import static’引入PowerMock相关的static method，而不引入Mockito的static method，通过‘Mockito.staticMthod()’显示调用Mockito的相关API。<strong>[tbd]</strong></p><ul><li>下面的示例代码只是为了展示PowerMock的用法，其中的测试方法（逻辑）可能并不适用于真实的测试代码编写工作！</li></ul><h3 id="1-Static-Method">1. Static Method</h3><h4 id="1-1-Mock-Stubbing">1.1 Mock &amp; Stubbing</h4><p>分为两个步骤：<br>1.调用PowerMockito.mockStatic()来mock一个静态类（如果要mock某个特定的方法，可以使用PowerMockito.spy(class)）；</p><p>2.使用Mockito.when()进行stub；</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.mockStatic(Static.class);<br>Mockito.when(Static.firstStaticMethod(param)).thenReturn(value);<br></code></pre></td></tr></table></figure><h4 id="1-2-Verify">1.2 Verify</h4><p>检验行为分成两步：<br>1.首先调用PowerMockito.verifyStatic()开始校验动作</p><p>2.然后调用你想要校验的静态方法</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.verifyStatic(); <span class="hljs-comment">// default times is once</span><br>Static.firstStaticMethod(param); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p><strong>important</strong><br>每一个静态方法的校验前，都应该调用一次verifyStatic()。<br>官方原文：</p><blockquote><p>Important: You need to call verifyStatic() per method verification.</p></blockquote><h4 id="1-3-stub-void-static-method-to-throw-exception">1.3 stub void static method to throw exception</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// arrange</span><br>PowerMockito.doThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>()).when(StaticExample.class);<br>StaticExample.isVoidStaticMethod();     <span class="hljs-comment">//call the method stubbed to stub</span><br><br><span class="hljs-comment">// act, call the method again</span><br>StaticExample.isVoidStaticMethod();<br></code></pre></td></tr></table></figure><p>使用PowerMockito.doThrow(~).when(~)来stub，并且调用一次你要stub的方法，完成stub！</p><h3 id="2-private-method">2. private method</h3><p>对于私有方法，需要采用局部模拟（partial mocking）的手段来实现！</p><h4 id="2-1-mock-stub">2.1 mock &amp; stub</h4><p>先构建spy对象，然后通过PowerMockito.when(underTest, nameOfMethodToMock, …param).thenXXX()来实现;(会在打桩时产生真实调用)<br>或者采用PowerMockito.doXXX().when(underTest, nameOfMethodToMock, …param)实现；(推荐使用，不会产生任何真实调用)</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StaticExample</span> <span class="hljs-variable">staticExampleMock</span> <span class="hljs-operator">=</span> PowerMockito.spy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticExample</span>());<br><span class="hljs-comment">// For private methods use PowerMockito.when</span><br>PowerMockito.doReturn(RETURN_VALUE).when(staticExampleMock,<span class="hljs-string">&quot;isPrivateMethod&quot;</span>,anyInt());<br><span class="hljs-comment">//when(staticExampleMock,&quot;isPrivateMethod&quot;,anyInt()).thenReturn(RETURN_VALUE);</span><br></code></pre></td></tr></table></figure><h4 id="2-2-verify">2.2 verify</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">verifyPrivate(staticExampleMock).invoke(<span class="hljs-string">&quot;isPrivateMethod&quot;</span>, anyInt());<br></code></pre></td></tr></table></figure><h3 id="3-Constructor">3. Constructor</h3><h4 id="3-1-mock-stub">3.1 mock &amp; stub</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.whenNew(MyClass.class).withNoArguments().thenThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;error message&quot;</span>));<br></code></pre></td></tr></table></figure><p>有参数的构造器也有相应的stub，形如whenNew(~).withXXX(~).thenXXX(~)，可以参见API，此处不赘述！</p><p><strong>Notice</strong>：在@PrepareForTest(Class&lt;?&gt;[] value)中，应该写入调用构造器的方法所属对象的类型！<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-meta">@PrepareForTest(X.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        whenNew(MyClass.class).withNoArguments().thenThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;error message&quot;</span>));<br><br>        <span class="hljs-type">X</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X</span>();<br>        x.y(); <span class="hljs-comment">// y is the method doing &quot;new MyClass()&quot;</span><br><br>        ..<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-verify">3.2 verify</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.verifyNew(MyClass.class).withNoArguments();<br></code></pre></td></tr></table></figure><h3 id="4-final-method">4. final method</h3><p>final method 的mock, stub, verify与普通方法类似，此处不再赘述！</p><hr><h2 id="参考资料-4">参考资料</h2><p><a href="https://github.com/OAbern/mock-demo">鄙人编写的代码示例</a>（部分来自官网示例，适量修改，并添加额外的示例）<br><a href="https://github.com/jayway/powermock">PowerMock On Github</a><br><a href="http://my.oschina.net/u/1433482/blog/645155#comment-list">使用PowerMock进行Mock测试</a><br><a href="http://www.ibm.com/developerworks/cn/java/j-lo-powermock/">PowerMock简介</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Test</tag>
      
      <tag>PowerMock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mockito</title>
    <link href="/posts/201612072734635843/"/>
    <url>/posts/201612072734635843/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Dan North, the originator of Behavior-Driven Development wrote this back in 2008:<br>“We decided during the main conference that we should use JUnit 4 and Mockito because we think they are the future of TDD and mocking in Java”</p></blockquote><hr><p><strong>说明</strong><br>本文章中的示例使用的开发环境为JDK1.8！<br>Mockito的版本信息如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文章中的示例部分来自<a href="https://dzone.com/refcardz/mockito">Mockito Dzone Reference Card</a></p><p><strong>Warning</strong>：文章中的示例只是为了展示Mockito的语法和特性，在实际的测试编码中，我们可能不会使用示例的用法（测试逻辑）！<br>官方原文：</p><blockquote><p>Warning: Note that the examples in this Refcardwere created to demonstrate behaviors of Mockito in a specific context. Of course, when writing the test for your codebase, there is no need to ensure that mocks are stubbed correctly.</p></blockquote><p>鄙人在Github上修改了部分示例，并且写了一些其他的示例（实际测试代码中用法）！<a href="https://github.com/OAbern/mock-demo">传送门</a></p><hr><h2 id="简介-2">简介</h2><p>Mockito是一个模拟测试框架。在一个被测试的对象（功能）A中，它通常需要与其他的对象（功能）B进行一些交互，我们把A称作被测试对象（tested object），把B称作协作者（collaborators）。那么在测试环境中，这些协作者都需要被创建，以便被测试对象可以使用它们。为了使测试代码简化以及满足上下文执行环境，我们通常使用测试替身（test double）来代替这些协作者，测试替身看上去和原始的协作者一样，但是却不依赖其他对象，而且可以执行预期行为，记录他们的交互行为（interactions，可以理解成方法调用）</p><hr><h2 id="核心元素-2">核心元素</h2><p><strong>TDD</strong> : Test-Driven Development</p><p><strong>BDD</strong> : Behavior-Driven Development</p><p><strong>Mock</strong> : 模拟对象，可以理解成Mockito框架帮我们自动生成的数据。通过mock产生的对象有以下的能力：1.可以通过编程产生预期行为；2.在对象的生命周期内可以校验它的交互行为（方法调用）；</p><blockquote><p>原文参考：Mock - an object with the ability to a) have a programmed expected behavior, and b) verify the interactions occurring in its lifetime (this object is usually created with the help of mocking framework)</p></blockquote><p><strong>Stub</strong> : 存根？桩？可以理解成通过硬编码的方式预期定义行为（方法），将会产生特定的结果，屏蔽原本行为（方法）的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**举例，伪代码描述*/</span><br><br><span class="hljs-comment">//define a method</span><br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">sayABC</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//stubbing</span><br>define when call sayABC the <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CBA&quot;</span><br><br><span class="hljs-comment">//act</span><br>sayABC();   <span class="hljs-comment">//call then we got &quot;CBA&quot; not &quot;ABC&quot;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>原文参考：Stub - an object with hardcoded behavior suitable for a given test (or a group of tests)</p></blockquote><p><strong>Spy</strong> : mock的代理对象，当方法被stub的时候，调用stub的定义行为（方法实现被忽略）；当方法没有被stub时，调用真实对象的行为（调用真实方法的逻辑实现）。此对象一般不由mock生成，而是自己编码new，再通过spy包装成mock</p><blockquote><p>原文参考：Spy - a mock created as a proxy to an existing real object; some methods can be stubbed, while the un-stubbed ones are forwarded to the covered object</p></blockquote><p><a href="https://en.wikipedia.org/wiki/Test_double"><strong>Test Doubles</strong></a>：测试替身，包括5个类型stub，mock，spy，fake，dummy。</p><hr><h2 id="地心历险-待研究">地心历险(待研究)</h2><p>揭示底层的原理</p><hr><h2 id="实战">实战</h2><h3 id="1-概述">1. 概述</h3><p>编写测试用例，一般分为三个阶段：</p><table><thead><tr><th>Section name</th><th>Responsibility</th></tr></thead><tbody><tr><td>arrange (given)</td><td>SUT and mocks initialization and configuration</td></tr><tr><td>act (when)</td><td>An operation which is a subject to testing；preferably only one operation on an SUT</td></tr><tr><td>assert (then)</td><td>The assertion and verification phase</td></tr></tbody></table><p>arrange-act-assert模式对应的语法为：when(~).thenXXX(~)<br>given-when-then模式(对应BDD形式)对应的语法为：given(~).willXXX(~)<br>官方大部分DEMO使用given-when-then模式，而且也推荐使用这种模式</p><blockquote><p>官方原文: given-when-then comments make intentions of tests clearer.</p></blockquote><h3 id="2-简例">2. 简例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.testng.annotations.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.Mockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.testng.Assert.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleStubbingTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TEST_NUMBER_OF_LEAFS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>  <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldReturnGivenValue</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// arrange</span><br>      <span class="hljs-type">Flower</span> <span class="hljs-variable">flowerMock</span> <span class="hljs-operator">=</span> mock(Flower.class);<br>      when(flowerMock.getNumberOfLeafs()).thenReturn(TEST_NUMBER_OF_LEAFS);<br>  <br>      <span class="hljs-comment">// act</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">numberOfLeafs</span> <span class="hljs-operator">=</span> flowerMock.getNumberOfLeafs();<br>      <br>      <span class="hljs-comment">// assert</span><br>      assertEquals(numberOfLeafs, TEST_NUMBER_OF_LEAFS);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.Mockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.BDDMockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleStubbingTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TEST_NUMBER_OF_LEAFS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>  <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldReturnGivenValueUsingBDDSemantics</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//given</span><br>      <span class="hljs-type">Flower</span> <span class="hljs-variable">flowerMock</span> <span class="hljs-operator">=</span> mock(Flower.class);<br>      given(flowerMock.getNumberOfLeafs()).willReturn(TEST_NUMBER_OF_LEAFS);<br>  <br>      <span class="hljs-comment">//when</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">numberOfLeafs</span> <span class="hljs-operator">=</span> flowerMock.getNumberOfLeafs();<br>      <br>      <span class="hljs-comment">//then</span><br>      assertEquals(numberOfLeafs, TEST_NUMBER_OF_LEAFS);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-参数匹配">3. 参数匹配</h3><p><code>（Argument Matching）</code><br>Mockito默认使用equals()来匹配参数。通常我们需要一个宽范围的参数匹配，Mockito的org.mockito.Matchers类中提供了一套内置的匹配器（Matcher）。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">given(plantSearcherMock.smellyMethod(anyInt(), contains(<span class="hljs-string">&quot;asparag&quot;</span>), eq(<span class="hljs-string">&quot;red&quot;</span>))).willReturn(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//given(plantSearcherMock.smellyMethod(anyInt(), contains(&quot;asparag&quot;), &quot;red&quot;)).willReturn(true);</span><br><br><span class="hljs-comment">//incorrect - would throw an exception</span><br></code></pre></td></tr></table></figure><p>如果有一个参数使用了匹配器，则所有的参数必须都使用匹配器，否则将会抛出异常！示例代码中注释掉的部分会抛出异常！</p><p>自定义的参数匹配器需要继承org.mockito.ArgumentMatcher抽象类，并且实现matches方法。然后调用argThat(org.hamcrest.Matcher<T> matcher)方法。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">given(schedulerMock.getNumberOfPlantsScheduledOnDate(<br>  argThat(haveHourFieldEqualTo(<span class="hljs-number">7</span>)))).willReturn(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//with the util method to create a matcher</span><br><span class="hljs-keyword">private</span> ArgumentMatcher <span class="hljs-title function_">haveHourFieldEqualTo</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hour)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArgumentMatcher</span>() &#123;<br>  <br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(Object argument)</span> &#123;<br>          <span class="hljs-keyword">return</span> ((Date) argument).getHours() == hour;<br>      &#125;<br>  &#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-调用Void方法">4. 调用Void方法</h3><p><code>Stubbing Void Methods</code><br>void Methods 应该使用 willXXX…given 或者 doXXX…when.来进行stubbing<br>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test(expectedExceptions = WaterException.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldStubVoidMethod</span><span class="hljs-params">()</span> &#123;<br><br>  <span class="hljs-type">WaterSource</span> <span class="hljs-variable">waterSourceMock</span> <span class="hljs-operator">=</span> mock(WaterSource.class);<br>  doThrow(WaterException.class).when(waterSourceMock).doSelfCheck();<br><br>  <span class="hljs-comment">//the same with BDD semantics</span><br>  <span class="hljs-comment">//willThrow(WaterException.class).given(waterSourceMock).doSelfCheck();</span><br><br>  waterSourceMock.doSelfCheck();<br><br>  <span class="hljs-comment">//exception expected</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-自定义返回器">5. 自定义返回器</h3><p><code>Stubbing With a Custom Answer</code><br>极少的情况会使用自己的处理逻辑来指定预期行为的结果(也就是given…willReturn(Custom Answer)中的Answer).Mockito还是提供了<code>org.mockito.stubbing.Answer&lt;Object&gt;</code>的接口来实现这个功能，你只需实现该接口中的answer方法。</p><p><strong>Warning</strong>：如果需要使用Custom Answer，可能预示着被测代码太复杂，需要重构！<br>官方原文：</p><blockquote><p>Warning: The need to use a custom answer may indicate that tested code is too complicated and should be re-factored.</p></blockquote><h3 id="6-检验行为">6. 检验行为</h3><p><code>（Verifying Behavior）</code><br>在一个mock对象的生命周期内，它会记住本身所有的操作。在被测系统（SUT）中，这些操作应该可以被轻易校验。Mockito中可以使用Mockito.verify(T mock)这个基础形式来进行校验<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">WaterSourcewaterSourceMock = mock(WaterSource.class);<br><br>waterSourceMock.doSelfCheck();<br><br>verify(waterSourceMock).doSelfCheck();      <span class="hljs-comment">//默认校验一次调用</span><br></code></pre></td></tr></table></figure><p>Mockito提供了一些有意义的校验模式，你也可以创建自定义校验模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">verify(waterSourceMock,never()).doSelfCheck();<br><br>verify(waterSourceMock,times(<span class="hljs-number">2</span>)).getWaterPressure();<br><br>verify(waterSourceMock,atLeast(<span class="hljs-number">1</span>)).getWaterTemperature();<br></code></pre></td></tr></table></figure><h3 id="7-校验调用顺序">7. 校验调用顺序</h3><p><code>（Verifying Call Order）</code><br>Mockito可以让你校验调用的顺序，你可以创建一组mocks，然后在组内校验所有的调用顺序。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldVerifyInOrderThroughDifferentMocks</span><span class="hljs-params">()</span>&#123;<br><br>  WaterSourcewaterSource1=mock(WaterSource.class);<br>  WaterSourcewaterSource2=mock(WaterSource.class);<br><br>  waterSource1.doSelfCheck();<br>  waterSource2.getWaterPressure();<br>  waterSource1.getWaterTemperature();<br><br>  InOrderinOrder=inOrder(waterSource1,waterSource2);<br>  inOrder.verify(waterSource1).doSelfCheck();<br>  inOrder.verify(waterSource2).getWaterPressure();<br>  inOrder.verify(waterSource1).getWaterTemperature();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-真实调用">8. 真实调用</h3><p><code>Spying on Real Objects</code><br>在Mockito中，你可以使用真实的对象来代替mock，从而使部分方法可以stubbed。通常我们不需要使用spy一个真实的对象，这可能是代码异味（code smell）的信号。但在一些特殊的情况下（比如使用了遗留代码，或者IOC容器），纯mock对象可能不能进行测试。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldStubMethodAndCallRealNotStubbedMethod</span><span class="hljs-params">()</span> &#123;<br><br>  <span class="hljs-type">Flower</span> <span class="hljs-variable">realFlower</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>();<br>  realFlower.setNumberOfLeafs(ORIGINAL_NUMBER_OF_LEAFS);<br>  FlowerflowerSpy=spy(realFlower);<br>  willDoNothing().given(flowerSpy).setNumberOfLeafs(anyInt());<br><br>  flowerSpy.setNumberOfLeafs(NEW_NUMBER_OF_LEAFS);  <span class="hljs-comment">//stubbed,and should do nothing</span><br><br>  verify(flowerSpy).setNumberOfLeafs(NEW_NUMBER_OF_LEAFS);<br>  assertEquals(flowerSpy.getNumberOfLeafs(),ORIGINAL_NUMBER_OF_LEAFS);       <span class="hljs-comment">//value was not changed</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>当使用spy时，必须使用willXXX…given/ doXXX…的形式来stubbing，它可以在stub期间防止真实方法方法被调用</p><p><strong>Warning</strong>：当使用spy时，Mockito创建了真实对象的一份拷贝，因此所有的交互行为应该被传递到被创建的spy对象上<br>官方原文：</p><blockquote><p>Warning: While spying, Mockito creates a copy of a real object, and therefore all interactions should be passed using the created spy.</p></blockquote><h3 id="9-注解">9. 注解</h3><p><code>Annotations</code><br>Mockito提供三个注解来简化用静态方法创建mock对象的工作 – @Mock, @Spy, @Captor；注解@InjectMocks可以简化mock和spy对象的注入，它可以通过构造器注入，setter方法注入，field赋值注入。</p><p>使用注解的功能要调用MockitoAnnotations.initMocks(testClass)（通常在@Before的方法中调用），或者使用MockitoJUnit4Runner来作为junit runner</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//with constructor: PlantWaterer(WaterSource waterSource,</span><br><span class="hljs-comment">// WateringScheduler wateringScheduler) &#123;...&#125;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MockInjectingTest</span> &#123;<br><br>  <span class="hljs-meta">@Mock</span><br>  <span class="hljs-keyword">private</span> WaterSource waterSourceMock;<br><br>  <span class="hljs-meta">@Spy</span><br>  <span class="hljs-keyword">private</span> WateringScheduler wateringSchedulerSpy;<br><br>  <span class="hljs-meta">@InjectMocks</span><br>  <span class="hljs-keyword">private</span> PlantWaterer plantWaterer;<br><br>  <span class="hljs-meta">@BeforeMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>      MockitoAnnotations.initMocks(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldInjectMocks</span><span class="hljs-params">()</span> &#123;<br>      assertNotNull(plantWaterer.getWaterSource());<br>      assertNotNull(plantWaterer.getWateringScheduler());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Annotation</th><th>Responsibility</th></tr></thead><tbody><tr><td>@Mock</td><td>Creates a mock of a given type</td></tr><tr><td>@Spy</td><td>Creates a spy of a given object</td></tr><tr><td>@Captor</td><td>Creates an argument captor of a given type</td></tr><tr><td>@InjectMocks</td><td>Creates an object of a given type and injects mocks and spies existing in a test</td></tr></tbody></table><h3 id="10-修改默认返回值">10. 修改默认返回值</h3><p><code>（Changing the Mock Default Return Value）</code></p><p>Mockito使我们可以选择生成mock对象的默认值</p><table><thead><tr><th>Default Answer</th><th>Description</th></tr></thead><tbody><tr><td>RETURNS_DEFAULTS</td><td>Returns a default “empty” value (e.g., null, 0, false, empty collection) - used by default</td></tr><tr><td>RETURNS_SMART_NULLS</td><td>Creates a spy of a given object</td></tr><tr><td>RETURNS_MOCKS</td><td>Returns a default “empty” value, but a mock instead of null</td></tr><tr><td>RETURNS_DEEP_STUBS</td><td>Allows for a simple deep stubbing (e.g., Given(ourMock.getObject().getValue()).willReturn(s))</td></tr><tr><td>CALLS_REAL_METHODS</td><td>Call a real method of spied object</td></tr></tbody></table><blockquote><p>mock(clazz, Mockito.${Default Answer})</p></blockquote><h3 id="Tips">Tips</h3><p>依照本人的理解，在真正编写测试代码时，我们应该分清当前单元测试的目的，以及它所依赖的方法调用。然后在given阶段，mock各种依赖的对象，并且stub各种依赖对象的预期行为；when阶段进行测试目的的执行，也就是测试对象真实的调用行为；then阶段进行verify和assert。</p><hr><h2 id="局限性">局限性</h2><p>引用官方说明:<br><strong>Limitations</strong></p><ul><li>Mockito has a few limitations worth remembering. They are generally technical restrictions, but Mockito authors believe using hacks to work around them would encourage people to write poorly testable code. <strong>Mockito cannot</strong> :<ul><li>mock final classes</li><li>mock enums</li><li>mock final methods</li><li>mock static methods</li><li>mock private methods</li><li>mock hashCode() and equals()</li></ul></li></ul><h2 id="参考资料">参考资料</h2><p><a href="https://github.com/OAbern/mock-demo">鄙人编写的代码示例</a>（部分来自官网示例，适量修改，并添加额外的示例）<br><a href="http://mockito.org/">Mockito官网</a><br><a href="https://github.com/mockito/mockito">Mockito On Github</a><br><a href="https://dzone.com/refcardz/mockito">Mockito Dzone Reference Card</a><br><a href="http://stackoverflow.com/documentation/mockito/2055/introduction-to-mockito#t=201608090656397575575">Introduction to mockito</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Test</tag>
      
      <tag>Mockito</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京工业大学公开课：摄影的实用性与艺术性漫谈</title>
    <link href="/posts/201608033265830174/"/>
    <url>/posts/201608033265830174/</url>
    
    <content type="html"><![CDATA[<h3 id="摄影的视觉意义">摄影的视觉意义</h3><ol><li>摄影使光线永远停留</li><li>摄影使真实永存</li></ol><h3 id="摄影的必备器材与拍摄技法">摄影的必备器材与拍摄技法</h3><ol><li>摄影器材分类：传统胶片相机，现代数码相机</li><li>光圈与景深的关系；在不考虑景深问题的情况下，尽量用中等光圈（四角的清晰度会有差别，中心部位的光圈成像质量是最好的）</li><li>慢速摄影与高速摄影</li><li>尝试多角度的拍摄</li></ol><h3 id="摄影的视觉平面艺术构成">摄影的视觉平面艺术构成</h3><ol><li>构图之前的观察：形状，线条，影调（黑白），色彩（冷暖）</li></ol><h3 id="摄影的光线艺术">摄影的光线艺术</h3><ol><li>光线分类：顺光（正面光）；侧光；（侧，顶，纯）逆光；顶光；脚光；混合光；散射光；</li><li>光与影的结合</li></ol><h3 id="摄影的瞬间性">摄影的瞬间性</h3><ol><li>摄影的瞬间性是摄影的本质</li><li>摄影要抓住决定性的瞬间</li><li>新闻摄影、纪实摄影不允许作假，不允许动，不能破坏瞬间性（原则性问题）</li><li>瞬间感要多进行抓拍（连拍），不要失去那个决定的瞬间，否则可能悔恨一辈子！</li></ol><h3 id="摄影的艺术情感与艺术风格">摄影的艺术情感与艺术风格</h3><ol><li>把自己的情感和个性融入到作品里面</li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公开课</tag>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/posts/20160803120011998/"/>
    <url>/posts/20160803120011998/</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Apache Maven是一个软件项目管理的综合工具，基于项目对象模型（POM）的概念，Maven可以从一个中心资料片管理项目构建，报告和文件。</p><p>Maven提供给开发人员构建一个完整生命周期的框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。</p><p>在多个开发团队的环境时，Maven可以设置按照标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时拥有创建报表，检查，构建和测试自动化设置等功能。</p><hr><h2 id="核心元素">核心元素</h2><ul><li><h3 id="POM：">POM：</h3></li></ul><p>  代表项目对象模型。它是工作在Maven的基本单位。这是一个XML文件。它始终驻留在该项目基本目录。POM 包含的项目使用Maven来构建该项目和各种配置的详细信息。 POM 文件要求的三个必填字段: <code>groupId</code>（项目组），<code>artifactId</code>（项目名字），<code>version</code>（版本）。</p><ul><li><h3 id="超级POM：">超级POM：</h3></li></ul><p>  所有的POM继承自父类（尽管明确界定）。这个基础POM被称为超级POM，并包含继承默认情况下的值。 Maven使用有效的POM（超级POM加项目配置的配置）执行有关的目标。它可以帮助开发人员指定的最低配置的详细信息在pom.xml。</p><ul><li><h3 id="插件：">插件：</h3></li></ul><p>  Maven是一个实际执行的插件框架，每一个任务实际上是由插件完成的。</p><p>  一个插件通常提供了一组目标，可使用以下语法来执行：</p><blockquote><p>mvn [plugin-name]:[goal-name]</p></blockquote><p>Maven提供以下两种类型的插件：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>构建插件</td><td>他们在生成过程中执行，并应在pom.xml中的<code>&lt;build&gt;</code>元素进行配置</td></tr><tr><td>报告插件</td><td>他们的网站生成期间执行的，他们应该在pom.xml中的<code>&lt;reporting&gt;</code>元素进行配置</td></tr></tbody></table><hr><h2 id="Maven实战">Maven实战</h2><ol><li><strong>创建项目</strong><br>  Maven使用原型插件来创建项目。要创建一个简单的Java应用程序，我们使用maven-archetype-quickstart插件。在下面的例子中，我们将创建一个基于Maven的Java应用程序项目在C:\MVN文件夹。<br>  打开命令控制台，进入到C:\MVN目录并执行以下命令mvn命令。</li></ol><blockquote><p>C:\MVN&gt;mvn archetype:generate -DgroupId=com.companyname.bank -DartifactId=consumerBanking -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</p></blockquote><p>  也可以使用控制台交互的方式创建一个项目模板,使用一下命令打开交互模式（Generating project in Interactive mode）：</p><blockquote><p>C:\MVN&gt;mvn archetype:generate</p></blockquote><p>  然后会提示输入项目模板代号，后面会依次要求输入项目组名，项目名，版本号；<br><br/><br>2. <strong>Maven添加依赖</strong><br>  在pom.xml文件中可以添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 外部依赖，依赖的jar并不是来自仓库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ldapjdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ldapjdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\lib\ldapjdk.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  Maven的核心特征是依赖管理，Maven提供了一个高程度的控制来管理这样的场景。我们只需要在每个项目POM定义直接依赖关系，Maven自动处理其余部分。（传递依赖发现）</p><ol start="3"><li><p><strong>常用的Maven命令</strong><br><code>mvn package</code> 生成target目录，编译、测试代码，生成测试报告，生成jar/war文件<br><code>mvn jetty:run</code> 运行项目于jetty上<br><code>mvn compile</code> 编译<br><code>mvn test</code> 编译并测试<br><code>mvn clean</code> 清空生成的文件<br><code>mvn site</code> 生成项目相关信息的网站<br><code>mvn eclipse:eclipse</code> 将项目转化为Eclipse项目</p></li><li><p><strong>构建自动化-Hudson（哈德森）(有待探索)</strong><br>可以帮助在版本管理系统中更新代码时，主动更新相关联的项目！<br>提供持续集成服务，方便开发人员在提交新代码之后，对整个代码库进行自动化的构建，测试，部署等任务！并可以将报告反馈开发人员，方便修改问题代码。<br>详细使用可以参见《Maven实战》第11章 使用Hudson进行持续集成</p></li></ol><hr><h2 id="读书笔记·《Maven实战》">读书笔记·《Maven实战》</h2><h4 id="第3章-maven入门"><strong>第3章 maven入门</strong></h4><ol><li>编写POM，基本元素有</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-comment">&lt;!-- POM模板版本，最新稳定为‘4.0.0’ --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-comment">&lt;!--（项目组）--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!--（项目名字）--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--（版本）--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-comment">&lt;!-- --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Maven项目中默认的主代码目录是<code>/src/main/java</code>,默认的测试代码目录是<code>src/test/java</code><br><br/></li><li>Maven编译插件compiler默认只支持JAVA 1.3，需要显示指定编译器的版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 编译插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;org.apache.maven.plugins.maven-compiler-plugin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;jar.source&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;jar.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><h4 id="第5章-坐标和依赖"><strong>第5章 坐标和依赖</strong></h4><h5 id="4-依赖">4.依赖</h5><h6 id="依赖范围">依赖范围</h6><p><code>compile</code>：编译依赖范围，默认。对编译、测试、运行的classpath有效；<br><code>test</code>：测试依赖范围，仅对测试的classpath有效;<br><code>provided</code>：已提供依赖范围，仅对编译、测试的classpath有效；<br><code>runtime</code>：运行时依赖范围，仅对运行、测试的classpath有效；<br><code>system</code>：系统依赖范围，自己制定本地的依赖文件路径，与provided依赖范围一致；</p><h6 id="传递性依赖">传递性依赖</h6><p><strong>依赖调解第一原则</strong>：路径最短者优先依赖，例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">有两个依赖路径：<br>A -&gt; B -&gt; Y(1.0)<br>A -&gt; B -&gt; X -&gt; Y(2.0)<br><br>则A 传递性依赖 Y(1.0);   <br></code></pre></td></tr></table></figure><p><strong>依赖调解第二原则</strong>：声明在前者优先依赖，例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">有两个依赖路径，且在A的POM文件里 B声明在X前面：<br>A -&gt; B -&gt; Y(1.0)<br>A -&gt; X -&gt; Y(1.0)<br><br>则A 传递性依赖 Y(1.0);   <br></code></pre></td></tr></table></figure><p>通过以下两种方式可以改变依赖传递性：</p><ul><li><strong>可选依赖：</strong> 依赖将不会被传递（被动）；<br>声明元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>排除依赖：</strong> 排除指定的传递性依赖（主动）<br>声明元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="归类依赖"><strong>归类依赖</strong></h6><p>统一系列的框架包，可以声明元素来统一指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    &lt;&#123;customName&#125;&gt;&lt;/&#123;customName&#125;&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">propertites</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="优化依赖"><strong>优化依赖</strong></h6><blockquote><p>mvn dependency:list</p></blockquote><blockquote><p>mvn dependency:tree</p></blockquote><blockquote><p>mvn dependency:analyze</p></blockquote><p>可以通过以上命令对项目的依赖进行查看；<br>analyze分析后的依赖中可能会出现：<code>Used unDeclared dependencies</code> (项目中使用到未显式声明的依赖)和 <code>Unused declared denpendencies</code>(项目中有声明的依赖未使用)，应该特别注意！</p><h4 id="第8章-聚合与继承"><strong>第8章 聚合与继承</strong></h4><h6 id="聚合"><strong>聚合</strong></h6><p>通过聚合将多个模块组合到一起，方便进行统一的管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>POM<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><span class="hljs-comment">&lt;!-- 默认为jar，此处必须改为POM --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span><span class="hljs-comment">&lt;!-- 子模块的相对路径 --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="继承"><strong>继承</strong></h6><p>模块之间的继承可以消除公用部分的重复代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- parent module --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>POM<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><span class="hljs-comment">&lt;!-- 默认为jar，此处必须改为POM --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- children module --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-comment">&lt;!-- 可省略 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>&lt;！-- 可省略 --&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span><span class="hljs-comment">&lt;!-- POM文件的相对路径 --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>继承中的依赖管理</strong><br>声明在父模块中的依赖管理元素，子模块可以可选的继承，即在模块中的出现相同的<code>&lt;dependency&gt;</code>元素（省略<code>&lt;version&gt;</code>）即为继承，以此来保证各个子模块的依赖版本号一致；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- parent module --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果是子模块全部依赖父模块，可以通过下列的方式来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!-- parent module --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="反应堆"><strong>反应堆</strong></h6><p>在Maven项目中，反应堆指所有模块组成的构建结构；</p><p>反应堆的构建顺序根据各模块之间的依赖继承关系而来，模块之间的依赖关系将反应堆构成一个<strong>有向非循环图（Directed Acyclic Graph，DAG）</strong>，这个图不允许出现循环，否则Maven将报错！</p><p>裁剪反应堆，通过命令指定部分构建的模块，可以通过一下命令获取帮助查看裁剪命令</p><blockquote><p>mvn -h</p></blockquote><h4 id="第10章-使用Maven进行测试"><strong>第10章 使用Maven进行测试</strong></h4><p>Maven通过 <code>maven-surefire-plugin</code> 插件来运行单元测试用例；</p><ul><li><strong>跳过测试</strong></li></ul><blockquote><p>mvn pacakge -DskipTests</p></blockquote><p>or还可以通过在POM文件中配置maven-surefire-plugin插件来跳过测试</p><ul><li><p><strong>动态指定测试用例</strong></p></li><li><p><strong>包含和排除测试用例</strong></p></li><li><p><strong>测试覆盖率报告</strong></p></li></ul><blockquote><p>mvn cobertura:cobertura</p></blockquote><ul><li><strong>重用测试代码</strong><br>一部分测试代码需要重用，默认打包不会生成测试代码的jar，通过插件可以将测试类打包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>test-jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="第17章-编写Maven插件"><strong>第17章 编写Maven插件</strong></h4><p>TODO</p><h4 id="第18章-Archetype"><strong>第18章 Archetype</strong></h4><h5 id="自定义archetype"><strong>自定义archetype</strong></h5><p>通过自定义archetype，可以方便生成我们平常所需的项目骨架。</p><p><strong>archetype-catalog.xml</strong><br>当不指定archetype的坐标时，使用命令<code>mvn archetype:generate</code>会产生一个archetype的列表供用户选择，该列表的内容来自于archetype-catalog.xml。<br>使用自定义的archetype生成项目骨架前，应该将自定义的archetype坐标写入archetype-catalog.xml里面。</p><p>archetype-catalog<strong>来源</strong>：</p><div>            <input type="checkbox" disabled checked="checked">internal：maven-archetype-plugin内置；          </div><div>            <input type="checkbox" disabled checked="checked">local：本地，~/.m2./archetype-catalog.xml（默认不存在）；          </div><div>            <input type="checkbox" disabled checked="checked">remote：maven中央仓库；          </div><div>            <input type="checkbox" disabled checked="checked">file://...：用户指定本机任意位置；          </div><div>            <input type="checkbox" disabled checked="checked">http://...：用户指定网络中任意位置；          </div><br/>archetype-catalog.xml内容形如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">archetype-catalog</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0 http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">archetypes</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">archetype</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.archetypes<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-archetype-quickstart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>quickstart<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">archetype</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">archetypes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">archetype-catalog</span>&gt;</span><br></code></pre></td></tr></table></figure><p>指定生成命令<code>mvn archetype:generate -DarchetypeCatalog=file://</code>时将使用的archetype-catalog.xml的位置，等号后面的内容可以替换为来源的任意一个。</p><p><strong>archetype自定义</strong><br>自定义的文件应该都放在<code>src/main/resources/</code>下，<br>——src/main/resources/<br>|———— maven/archetype-metadata.xml<br>|———— archetype-resources/ $(相当于生成项目的根目录)<br>|—————— pom.xml<br>|—————— 其他的资源文件</p><p>archetype-metadata.xml为archetype资源的描述定义文件<br><a href="http://maven.apache.org/archetype/archetype-models/archetype-descriptor/archetype-descriptor.html#class_fileSet">archetype-metadata.xml官方参考文档</a></p><h5 id="Demo"><strong>Demo</strong></h5><p><a href="https://github.com/OAbern/maven-archetype-single-modules-gen">单模块简单DEMO</a><br><a href="https://github.com/OAbern/maven-archetype-multi-modules-gen">多模块复杂DEMO</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
