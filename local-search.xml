<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/202207131243066710/"/>
    <url>/posts/202207131243066710/</url>
    
    <content type="html"><![CDATA[<p>Welcome to oabern’s garden, this is my first post!</p><hr><h1>花</h1><h2 id="桃花">桃花</h2><p><code>杜甫</code></p><blockquote><p>桃花一簇开无主，可爱深红爱浅红。<br>–《江畔独步寻花·其五》杜甫</p></blockquote><h2 id="梨花">梨花</h2><p><code>丘为</code></p><blockquote><p>冷艳全欺雪，馀香乍入衣。<br>–《左掖梨花》丘为（唐）</p></blockquote><h1>庄子</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">井蛙不可以语于海者，拘于虚也；夏虫不可以语于冰者，笃于时也；曲士不可以语于道者，束于教也。（井蛙不语海，夏虫不语冰，凡夫不语道）<br><span class="hljs-comment">--《庄子集释》卷六下《外篇·秋水》</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/posts/20220707794273428/"/>
    <url>/posts/20220707794273428/</url>
    
    <content type="html"><![CDATA[<h2 id="简介-4">简介</h2><p><strong>正则表达式</strong>，又称规则表达式（Regular Expression，在代码中常简写为regex、regexp或RE），是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（“元字符”）。</p><p>正则表达式是一种<strong>用来描述规则的表达式</strong>，通常被用来检索、替换那些符合某个模式（规则）的文本。</p><p>正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及而来的，后广泛用于其他编程语言中。</p><p>正则的底层原理，就是使用状态机的思想进行模式匹配。大家可以利用<a href="https://regexper.com/">regexper.com</a>这个工具很好地可视化自己写的正则表达式的状态机。</p><h2 id="语法">语法</h2><p>正则表达式的基本<strong>组成元素</strong>可以分为：<strong>字符 和 元字符</strong>。</p><ul><li>字符，就是基础的计算机字符编码，通常正则表达式里面使用的就是数字、英文字母。</li><li>元字符，也被称为特殊字符，是一些用来表示特殊语义的字符。如^表示非，|表示或等。</li></ul><h3 id="字符">字符</h3><h4 id="单字符">单字符</h4><p>单个字符的映射关系是一对一, 最简单的正则就是单个字符。<br>部分特殊语义字符需要通过<code>\</code>来转义</p><table><thead><tr><th>特殊字符</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>换行符</td><td>\n</td><td>new line</td></tr><tr><td>换页符</td><td>\f</td><td>form feed</td></tr><tr><td>回车符</td><td>\r</td><td>return</td></tr><tr><td>空白符</td><td>\s</td><td>space</td></tr><tr><td>制表符</td><td>\t</td><td>tab</td></tr><tr><td>垂直制表符</td><td>\v</td><td>vertical tab</td></tr><tr><td>回退符</td><td>[\b]</td><td>backspace,之所以使用[]符号是避免和\b重复</td></tr></tbody></table><h4 id="多字符">多字符</h4><p>使用集合区间和通配符的方式就可以实现一对多的匹配。</p><p>集合的定义方式是使用中括号 <code>[</code> 和 <code>]</code> 。如 <code>/[123]/</code> 这个正则就能同时匹配1,2,3三个字符。如果想匹配所有的数字，可以用元字符 <code>-</code> 就可以用来表示区间范围，用 <code>/[0-9]/</code> 就能匹配所有的数字,  <code>/[a-z]/</code> 则可以匹配所有的英文小写字母。</p><p>即便有了集合和区间的定义方式，如果要同时匹配多种字符也要一一列举，这是低效的。所以在正则表达式里衍生了一批用来同时匹配多个字符的简便正则表达式:</p><table><thead><tr><th>匹配区间</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>除了换行符之外的任何字符</td><td>.</td><td>句号,除了句子结束符</td></tr><tr><td>单个数字, [0-9]</td><td>\d</td><td>digit</td></tr><tr><td>除了[0-9]</td><td>\D</td><td>not digit</td></tr><tr><td>包括下划线在内的单个字符，[A-Za-z0-9_]</td><td>\w</td><td>word</td></tr><tr><td>非单字字符</td><td>\W</td><td>not word</td></tr><tr><td>匹配空白字符,包括空格、制表符、换页符和换行符</td><td>\s</td><td>space</td></tr><tr><td>匹配非空白字符</td><td>\S</td><td>not space</td></tr></tbody></table><h3 id="逻辑处理">逻辑处理</h3><table><thead><tr><th>逻辑关系</th><th>正则元字符</th></tr></thead><tbody><tr><td>与</td><td>无</td></tr><tr><td>非</td><td>[^regex]和!</td></tr><tr><td>或</td><td>|</td></tr></tbody></table><h3 id="循环和重复">循环和重复</h3><p>通过定义单个规则的出现次数，可以简化正则</p><table><thead><tr><th>匹配规则</th><th>元字符</th><th>联想方式</th></tr></thead><tbody><tr><td>0次或1次</td><td>?</td><td>有无</td></tr><tr><td>0次或无数次</td><td>*</td><td>星空无数或什么都看不见</td></tr><tr><td>1次或无数次</td><td>+</td><td>+1</td></tr><tr><td>特定次数</td><td>{x}, {min, max}</td><td>区间</td></tr></tbody></table><p>特定次数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- &#123;x&#125;: 恰好x次  <br>- &#123;min, max&#125;： 介于min次到max次之间  <br>- &#123;min, &#125;: 至少min次  <br>- &#123;0, max&#125;： 至多max次  <br></code></pre></td></tr></table></figure><h3 id="位置边界">位置边界</h3><p>对于正则的匹配，我们可以指定匹配的开始和结束位置</p><table><thead><tr><th>边界和标志</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>单词边界</td><td>\b</td><td>boundary</td></tr><tr><td>非单词边界</td><td>\B</td><td>not boundary</td></tr><tr><td>字符串开头</td><td>^</td><td>左上角</td></tr><tr><td>字符串结尾</td><td>$</td><td></td></tr><tr><td>多行模式</td><td>m标志</td><td>multiple of lines</td></tr><tr><td>忽略大小写</td><td>i标志</td><td>ignore case, case-insensitive</td></tr><tr><td>全局模式</td><td>g标志</td><td>global，多次匹配而非单次</td></tr></tbody></table><p>说明：标志通常是作为独立参数，比如：</p><ul><li>JAVA中<code>Pattern.compile(String regex, int flags);</code></li><li>JavaScript中<code>str.replace(/(ab)c/g, 'a');</code></li></ul><h3 id="子表达式">子表达式</h3><h4 id="分组">分组</h4><ul><li>子表达式可以通过<code>()</code>进行分组</li><li>对于分组的表达式我们可以使用<code>\1</code> <code>\2</code>…的形式来引用，<code>\0</code>表示引用整个表达式</li><li>在替换字符串时，语法上有些许区别，用$1,$2…来引用要被替换的字符串。<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：Hello what what is the first thing, and I am am scq000.<br><br>正则：\b(\w+)\s\1<br><br>匹配结果：<br>what what<br>am am<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657101324476_0.png" alt="image.png"></p><ul><li>子表达式可以通过<code>(?:regex)</code>避免进行分组，也就是说分组时会跳过此表达式不编号<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：ab abb aab<br><br>正则：(?:a)(b)\1<br><br>匹配结果：<br>abb<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657117291432_0.png" alt="image.png"></p><h4 id="回溯引用">回溯引用</h4><ul><li>前向查找<br>前向查找(lookahead)是用来限制后缀。以 <code>(?=regex)</code> 包含的子表达式，从子表达式的位置开始<strong>向前</strong>查找符合规则的字串。<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：happy happily<br><br>正则：happ(?=ily)<br><br>匹配结果：()中的内容不被匹配<br>happ(ily)<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657116520443_0.png" alt="image.png"></p><ul><li>后向查找<br>后向查找(lookbehind)是用来限制前缀。以 <code>(?&lt;=regex)</code> 包含的子表达式，从子表达式的位置开始<strong>向后</strong>查找符合规则的字串。<br>举例：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">字符串：apple people<br><br>正则：(?&lt;=ap)ple<br><br>匹配结果：()中的内容不被匹配<br>(ap)ple<br></code></pre></td></tr></table></figure><p><img src="/img/post/image_1657116279837_0.png" alt="image.png"></p><table><thead><tr><th>回溯查找</th><th>正则</th><th>记忆方式</th></tr></thead><tbody><tr><td>引用</td><td>\0,\1,\2 和 $0, $1, $2</td><td>转义+数字</td></tr><tr><td>非捕获组</td><td>(?:)</td><td>引用(:)</td></tr><tr><td>前向查找</td><td>(?=)</td><td>后缀(=)</td></tr><tr><td>前向负查找</td><td>(?!)</td><td>后缀(!=)</td></tr><tr><td>后向查找</td><td>(?&lt;=)</td><td>&lt;左括号，前缀(=)</td></tr><tr><td>后向负查找</td><td>(?&lt;!)</td><td>&lt;左括号，前缀(!=)</td></tr></tbody></table><h2 id="参考资料-4">参考资料</h2><p><a href="https://juejin.cn/post/6844903845227659271">正则表达式不要背</a><br><a href="https://dzone.com/articles/abc-of-regex">The ABCs of RegEx</a></p><p>工具：<br><a href="https://regex101.com/">正则在线测试</a><br><a href="regexper.com">正则状态机生成</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch入门</title>
    <link href="/posts/201802021020867394/"/>
    <url>/posts/201802021020867394/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning">版本提示：本文涉及的ES版本为5.4</p><h2 id="1-简介">1. 简介</h2><p>Elasticsearch是一个实时分布式搜索和分析引擎，它让你已前所未有的速度处理大数据成为可能。它用于全文搜索，结构化搜索，分析以及将这三者混合使用。<br>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目的是使全文检索变得简单， 通过隐藏 Lucene 的复杂性，取而代之的是提供一套简单一致的 RESTful API。</p><p>Elasticsearh可以被这样形容：</p><ul><li>一个分布式的实时文档存储，每个字段可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><hr><h2 id="2-核心元素">2. 核心元素</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_finding_your_feet.html">快速入门Demo</a></p><ul><li>面向文档（document oriented）：Elasticsearch是面向文档的，它可以存储整个对象或文档。它不仅仅是存储，还会索引每个文档的内容。文档是不可变的：他们不能被修改，只能被替换。Elasticsearch使用JSON作为文档序列化格式。类比传统关系数据库：</li></ul><table><thead><tr><th>类比</th><th>项1</th><th>项2</th><th>项3</th><th>项4</th></tr></thead><tbody><tr><td>Relational DB</td><td>Databases</td><td>Tables</td><td>Rows</td><td>Columns</td></tr><tr><td>Elasticsearch</td><td>Indices</td><td>Types</td><td>Documents</td><td>Fields</td></tr></tbody></table><hr><h2 id="3-地心历险">3. 地心历险</h2><h3 id="3-1-关于分布式">3.1 关于分布式</h3><ul><li><p><strong>集群和节点</strong>：节点（node）是一个运行着的Elasticserach实例。集群（cluster）<a href="http://xn--cluster-4t3kq1x40gf39c2eccv7fl2w.name">是一组具有相同cluster.name</a>(配置在<code>./config/elasticsearch.yml</code>文件)的节点集合，他们协同工作，共享数据并提供故障转移和扩展功能，当然一个节点也可以组成一个集群。当加入新节点或者删除一个节点时，集群就会感知到并平衡数据。</p></li><li><p><strong>主节点</strong>：集群中一个节点会被选举为主节点，它将临时管理集群级别的一些变更，例如新建或删除索引、增加或移除节点等。主节点不参与文档级别的变更或搜索，这意味着在流量增长的时候，主节点不会成为集群的瓶颈。</p></li><li><p><strong>节点</strong>：任何节点都可以成为主节点，我们可以和集群中任何节点通信。每个节点都知道文档存在于哪个节点上，它们可以转发请求到相应的节点上。我们访问的节点负责收集各节点返回的数据，最后一起返回给客户端。这一切有Elasticsearch处理。</p></li><li><p><strong>分片（Shard）</strong>：索引只是一个用来指向一个或多个分片的“逻辑命名空间（logical namespace）”。一个分片是一个最小级别的工作单元，它只保存了索引中所有数据的一部分。分片是Elasticsearch在集群中分发数据的关键。文档存储在分片中，然后分片分配到你集群中的节点上。当你的集群扩容或缩小，Elasticsearch将会自动在你的节点中迁移分片，以使集群保持平衡。<br>分片有两种类型：<strong>主分片（primary shard）</strong> 或者是 <strong>复制分片（replica shard）</strong>。索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档。复制分片与主分片不会分配到同一个节点上。文档的索引首先被存储在主分片中，然后并发复制到对应的复制节点上。</p></li><li><p><strong>乐观并发控制</strong>：如果在读写过程中数据发生了变化，更新操作将失败，这时候由程序决定在失败后如何解决冲突。ELasticsearch使用&quot;_version&quot;这个字段（每个文档都有）来保证所有修改都被正确排序。这个字段的值将会在文档被改变时加一。<br>我们可以通过以下请求来保证数据不会因为修改冲突而丢失：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//修改_index=1 且 _version=1的文档</span><br>PUT /myTyte/index/<span class="hljs-number">1</span>?version=<span class="hljs-number">1</span><br><br><span class="hljs-comment">//失败时返回409Http状态码，响应体如下</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;root_cause&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[user][1]: version conflict, current version [7] is different than the one provided [5]&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XBy70gdWTJ6MQMVUCoQC-A&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;shard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[user][1]: version conflict, current version [7] is different than the one provided [5]&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XBy70gdWTJ6MQMVUCoQC-A&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">409</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当然也可以使用外部版本控制系统，一种常见的结构是使用一些其他的数据库作为主数据库，然后使用Elasticsearch搜索数据，当主数据库发生变化，就要拷贝到Elasticsearch中。如果主数据库有版本字段，或者是timstamp等可以用于版本控制的字段，可以在QueryString后加<code>version_type=external</code>来使用这些版本号。外部版本号与内部版本号检查不一样，内部版本号检查相等，外部版本号检查是否小于指定版本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//使用外部版本号</span><br>PUT /myTyte/index/<span class="hljs-number">1</span>?version=<span class="hljs-number">1</span>&amp;version_type=external<br></code></pre></td></tr></table></figure><h3 id="3-2-分布式文档存储">3.2 分布式文档存储</h3><h4 id="路由文档"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-docs.html">路由文档</a></h4><p>通过以下公式决定文档路由到哪一个分片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">shard = hash(routing) % number_of_primary_shards<br></code></pre></td></tr></table></figure><p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过 hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到 余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p><code>consistency</code><br>在默认设置下，即使仅仅是在试图执行一个_写_操作之前，主分片都会要求 必须要有 <code>_规定数量(quorum)_</code>（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行_写_操作(其中分片副本可以是主分片或者副本分片)。这是为了避免在发生网络分区故障（network partition）的时候进行_写_操作，进而导致数据不一致。<code>_规定数量_</code>即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>( (primary + number_of_replicas) / <span class="hljs-number">2</span> ) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>consistency 参数的值可以设为<br><code>one</code> （只要主分片状态 ok 就允许执行_写_操作）;<br><code>all</code>（必须要主分片和所有副本分片的状态没问题才允许执行_写_操作）;<br><code>quorum</code> 。默认值为 <code>quorum</code> ,即大多数的分片副本状态没问题就允许执行_写_操作。</p><blockquote><p>NOTE: 新索引默认有 1 个副本分片，这意味着为满足 规定数量 应该 需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当 number_of_replicas 大于1的时候，规定数量才会执行。</p></blockquote><p><code>timeout</code><br>如果没有足够的副本分片会发生什么？ Elasticsearch会等待，希望更多的分片出现。默认情况下，它最多等待1分钟。 如果你需要，你可以使用 timeout 参数 使它更早终止： 100(ms)，30s。</p><h4 id="取文档"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-read.html">取文档</a></h4><p><img src="/img/post/elas_0403.png" alt="取回单个文档"><br>步骤：协调节点确定文档所属分片，转发请求到相应分片的节点（轮询所有的副本分片来达到负载均衡），返回文档；</p><h4 id="搜索"><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/empty-search.html">搜索</a></h4><blockquote><p>GET /_search?timeout=10ms</p></blockquote><p>搜索可以指定超时，在请求超时之前，Elasticsearch 将会返回已经成功从每个分片获取的结果。<br>应当注意的是 <code>timeout</code> 不是停止执行查询，它仅仅是告知正在协调的节点返回到目前为止收集的结果并且关闭连接。在后台，其他的分片可能仍在执行查询即使是结果已经被发送了。<br>使用超时是因为 SLA(服务等级协议)对你是很重要的，而不是因为想去中止长时间运行的查询。</p><p>分布式系统中的<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/pagination.html">深度分页问题</a>，限制查询量不要超过1000；</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/analysis-intro.html">分析与分析器</a><br>索引文本和查询字符串必须标准化为同样的格式。<br>分析器包含三个功能：字符过滤器（例如去除html），分词器（拆分文本为token），Token过滤器（例如转化大小写，同义词关联，转化词根等）</p><p>核心简单域类型：</p><ul><li>字符串 : string</li><li>整数 : byte, short, integer, long</li><li>浮点数: float, double</li><li>布尔型: boolean</li><li>日期: date</li></ul><p>复杂核心域类型</p><ul><li>数组，</li><li>内部对象(object，扁平式键值对结构，问题是对象数组时，缺少字段相关性)，</li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/nested-objects.html">嵌套对象（nested，每一个嵌套对象都会被索引为一个 隐藏的独立文档）</a></li></ul><h3 id="3-3-Modules">3.3 Modules</h3><h4 id="线程池">线程池</h4><p>线程池分为两种：</p><ol><li><code>fixed</code><br>固定线程池拥有固定数量的线程来处理任务，并且自带一个可选有界的队列。<br><code>size</code>参数控制线程数量，默认数量是5。<br><code>queue_size</code>控制队列容量，默认会被设置为-1，表示无界。当有请求到来且队列是满的，请求将会被中断。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">thread_pool:</span><br>    <span class="hljs-attr">index:</span><br>        <span class="hljs-attr">size:</span> <span class="hljs-number">30</span><br>        <span class="hljs-attr">queue_size:</span> <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>scaling</code><br>可扩展线程拥有动态数量的线程。线程数量和工作负载成比例，且在<code>core</code>和<code>max</code>参数之间变化</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">thread_pool:</span><br>    <span class="hljs-attr">warmer:</span><br>        <span class="hljs-attr">core:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">max:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">keep_alive:</span> <span class="hljs-string">2m</span><br></code></pre></td></tr></table></figure><p>主要的线程池如下：<br><code>generic</code><br>通用操作，比如后台节点的恢复，线程池类型是<code>scaling</code>；</p><p><code>index</code><br>index/delete操作。线程池的类型是<code>fixed</code>，线程数量等于<code>CPU核心数</code>，队列容量为200；</p><p><code>search</code><br>count/search/suggest操作。线程池的类型是<code>fixed</code>，线程数量等于<code>(CPU核心数 * 3) / 2) + 1</code>，队列容量为1000；</p><p><code>get</code><br>get操作。线程数量等于<code>CPU核心数</code>，队列容量为1000；</p><p><code>bulk</code><br>bulk操作。线程数量等于<code>CPU核心数</code>，队列容量为200；</p><hr><h2 id="4-实战">4. 实战</h2><h3 id="4-1-插件">4.1 插件</h3><ul><li>Marvel</li></ul><h3 id="4-2-命令">4.2 命令</h3><ul><li>集群健康</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>集群健康有三种状态：green、yellow、red<br>GET <span class="hljs-regexp">/_cluster/</span>health<br></code></pre></td></tr></table></figure><ol><li><p><code>green</code><br>所有的主分片和副本分片都正常运行。</p></li><li><p><code>yellow</code><br>所有的主分片都正常运行，但不是所有的副本分片都正常运行。</p></li><li><p><code>red</code><br>有主分片没能正常运行。</p></li></ol><h3 id="4-3-基础操作">4.3 基础操作</h3><p>几乎所有操作可以通过http请求来实现<br><code>curl -X$&#123;m&#125; $&#123;url&#125; -d $&#123;json&#125;</code></p><ul><li>索引文档<br>在Elasticsearch中存储数据的行为就叫做索引（indexing）。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求：</span><br>PUT localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oabern&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to go rock climbing&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;programing&quot;</span><br>    <span class="hljs-punctuation">]</span><br> <span class="hljs-punctuation">&#125;</span><br> <br> <span class="hljs-comment">//服务端响应</span><br> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>需要更新文档时只要重新put，此时响应结果中的&quot;_version&quot;会自增。</p><ul><li>局部更新</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /myType/user/<span class="hljs-number">1</span>/_update<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cqcq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;addField&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>文档是不可变的：他们不能被修改，只能被替换。<br>更新操作过程：</p><ol><li>从旧文档构建 JSON；</li><li>更改该 JSON；</li><li>删除旧文档；</li><li>索引一个新文档；<br>将会合并到现有文档中，对象合并在一起，存在的标量字段被覆盖，新字段被添加。<br>更多复杂的局部更新操作可以使用脚本（Groovy）来实现。</li></ol><ul><li>检索文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/<span class="hljs-number">1</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oabern&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to go rock climbing&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;programing&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>其他操作</li></ul><ol><li>删除</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br><span class="hljs-comment">//DELETE localhost:9200/myType/user/1</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>存在</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br>HEAD localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/<span class="hljs-number">1</span><br><br><span class="hljs-comment">//服务端响应（无json）,</span><br><span class="hljs-comment">//存在返回状态码200，</span><br><span class="hljs-comment">//不存在返回状态码404</span><br></code></pre></td></tr></table></figure><ol start="3"><li>获取多个</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_mget<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;docs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>批量操作<br>批量操作可以帮助提供操作性能<br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/bulk.html">代价较小的批量操作</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-multi-doc.html#bulk-format">ES骚操作</a></p></li><li><p>简单搜索</p></li></ul><ol><li><strong>全部搜索</strong></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br><span class="hljs-comment">//查询所有文档</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myType/user/_search<br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myType&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;miyakee&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to collect rock albums&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;paint&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;ukulele&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//……省略</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>默认返回前10个得分最高的结果。</p><ol start="2"><li><strong>带条件搜索（Query String）</strong></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> localhost:9200/myTyte/user/_search?<span class="hljs-attribute">q</span>=age:21<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>带条件搜索（DSL）</strong></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myTyte/user/_search<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;address.city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rock climbing&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.82252765</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.82252765</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oabern&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to go rock climbing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;programing&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myTyte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.55510485</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;miyakee&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cq&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;emailNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9527</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;about&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I love to collect rock albums&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;paint&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;ukulele&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>默认情况下，Elasticsearch根据结果相关性评分来对结果集进行排序，所谓的「结果相关性评分」就是文档与查询条件的匹配程度。</p><ol start="4"><li><strong>高亮搜索</strong></li></ol><ul><li>分析（聚合Aggregations）</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//客户端请求</span><br><span class="hljs-comment">//统计每个兴趣下的人数，以及平均年龄</span><br>GET localhost<span class="hljs-punctuation">:</span><span class="hljs-number">9200</span>/myTyte/user/_search<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;all_interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;interests&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//服务端响应</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//……省略,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;all_interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;photography&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;climbing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paint&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;programing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rock&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ukulele&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="5-参考资料">5. 参考资料</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.4/index.html">Elasticsearch Reference</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">Elasticsearch: 权威指南</a><br><a href="http://www.cnblogs.com/duanxz/p/3621404.html">搭建elasticsearch，并同步mysql数据</a><br><a href="http://donlianli.iteye.com/blog/2094305">Elasticsearch搜索类型(query type)详解</a><br><a href="https://www.elastic.co/blog/understanding-query-then-fetch-vs-dfs-query-then-fetch">Understanding “Query Then Fetch” vs “DFS Query Then Fetch”</a><br><a href="https://segmentfault.com/a/1190000002972420">ELK：kibana使用的lucene查询语法</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
      <tag>Elasticsearch</tag>
      
      <tag>大数据</tag>
      
      <tag>Lucene</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mockito2 探索</title>
    <link href="/posts/201612133008866774/"/>
    <url>/posts/201612133008866774/</url>
    
    <content type="html"><![CDATA[<h2 id="简介-2">简介</h2><h2 id="核心元素-2">核心元素</h2><ul><li><p>将mock的底层引擎CGLIB 更改为 ByteBuddy</p></li><li><p>为JAVA8做准备</p></li><li><p>Mockito的Junit runner 和 rule规则器 可以探测不用stubs</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// detect unused stubs</span><br><span class="hljs-meta">@RunWith(MockitoJUnitRunner.class)</span><br><br><span class="hljs-comment">// don&#x27;t detect, old behaviour</span><br><span class="hljs-meta">@RunWith(MockitoJUnitRunner.Silent.class)</span><br></code></pre></td></tr></table></figure><p>or with the rule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// detect unused stubs</span><br><span class="hljs-meta">@Rule</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">MockitoRule</span> <span class="hljs-variable">mrule</span> <span class="hljs-operator">=</span> MockitoJUnit.rule();<br><br><span class="hljs-comment">// don&#x27;t warn user about misusage, old behaviour</span><br><span class="hljs-meta">@Rule</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">MockitoRule</span> <span class="hljs-variable">mrule</span> <span class="hljs-operator">=</span> MockitoJUnit.rule().silent();<br></code></pre></td></tr></table></figure><ul><li><p>对于框架的整合者或高级用户，提供新的API<code>org.mockito.listeners.MockitoListener</code>来探测无用的sutbs</p></li><li><p>新的校验控制器支持懒校验<code>Lazy verification</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Rule</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">VerificationCollector</span> <span class="hljs-variable">collector</span> <span class="hljs-operator">=</span> MockitoJUnit.collector();<br></code></pre></td></tr></table></figure><p>在一个测试方法中，所有的校验都会被执行并报告出来，即使校验报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">IMethods</span> <span class="hljs-variable">methods</span> <span class="hljs-operator">=</span> mock(IMethods.class);<br><span class="hljs-comment">// Both methods are not called, but will be reported at once</span><br>verify(methods).simpleMethod();<br>verify(methods).byteReturningMethod();<br></code></pre></td></tr></table></figure><p>默认的非懒校验的方式，会在<code>simpleMethod</code>停止校验，并不会报告未进行校验的方法<code>byteReturningMethod</code></p><ul><li>More Answers</li></ul><ol><li>Introducing Answers.RETURNS_SELF, which should be useful to mock builders</li><li>Java 8 friendly answers AdditionalAnswers.answer(arg1 -&gt; arg1.toString())</li></ol><ul><li>改善BDDMockito的API</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">BDDMockito.then(mock).should(inOrder).doSomething();<br>BDDMockito.then(mock).shouldHaveZeroInteractions();<br>BDDMockito.then(person).shouldHaveNoMoreInteractions();<br></code></pre></td></tr></table></figure><hr><h2 id="地心历险">地心历险</h2><p>揭示底层的原理</p><hr><h2 id="实战-2">实战</h2><p>实际使用中常用的东西</p><hr><h2 id="参考资料-2">参考资料</h2><p><a href="https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2">What’s new in Mockito2</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Test</tag>
      
      <tag>Mockito</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerMock</title>
    <link href="/posts/201612083509692517/"/>
    <url>/posts/201612083509692517/</url>
    
    <content type="html"><![CDATA[<p><strong>说明</strong><br>本文使用的开发环境为JDK1.8。<br>本文使用的框架版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- junit --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!-- Mockito 2016.8.8目前1.*为稳定版 2.*为beta --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- PowerMock  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.powermock<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>powermock-module-junit4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.powermock<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>powermock-api-mockito<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于PowerMock的版本兼容问题，<a href="https://github.com/jayway/powermock/wiki/MockitoUsage#supported-versions">点击这里查看</a></p><hr><h2 id="简介-3">简介</h2><p>PowerMock可以支持EasyMock和Mockito，作为Mockito的扩展，使用PowerMock可以mock private方法，mock static方法，mock final方法，mock construction方法。PowerMock封装了部分Mockito的API，可以使用Mockito的语法来进行测试代码的编写。</p><p>Basically, PowerMock provides a class called “PowerMockito” for creating mock/object/class and initiating verification, and expectations, everything else you can still use Mockito to setup and verify expectation (e.g. times(), anyInt()).</p><p>All usages require @RunWith(PowerMockRunner.class) and @PrepareForTest annotated at class level.</p><hr><h2 id="核心元素-3">核心元素</h2><p>核心的关键词或者关键知识点</p><hr><h2 id="地心历险（TODO）">地心历险（TODO）</h2><p>揭示底层的原理</p><hr><h2 id="实战-3">实战</h2><h3 id="Tips-2">Tips</h3><ul><li><p>在使用PowerMock时，必须将@RunWith(PowerMockRunner.class) and @PrepareForTest注解到类级别上</p></li><li><p>关于Argument Matcher的使用与Mockito中类似，此处不再赘述！</p></li><li><p>在下面的示例中我们没有使用 ‘import static’，以便大家更好的理解方法属于Mockito还是PowerMockito。但是我们强烈建议你在实际编写测试代码中使用‘import static’，这样的可读性更好！<br>官方原文：</p></li></ul><blockquote><p>In the examples below we don’t use static imports for the method in the Mockito or PowerMockito API for better understanding of where the methods are located. However we strongly encourage you to statically import the methods in your real test cases for improved readability.</p></blockquote><p>个人建议:由于PowerMock封装了Mockito的API，所以同时引入两个框架的static method可能会造成编译器不知道调用哪个方法。因此在使用PowerMock相关的API时，通过‘import static’引入PowerMock相关的static method，而不引入Mockito的static method，通过‘Mockito.staticMthod()’显示调用Mockito的相关API。<strong>[tbd]</strong></p><ul><li>下面的示例代码只是为了展示PowerMock的用法，其中的测试方法（逻辑）可能并不适用于真实的测试代码编写工作！</li></ul><h3 id="1-Static-Method">1. Static Method</h3><h4 id="1-1-Mock-Stubbing">1.1 Mock &amp; Stubbing</h4><p>分为两个步骤：<br>1.调用PowerMockito.mockStatic()来mock一个静态类（如果要mock某个特定的方法，可以使用PowerMockito.spy(class)）；</p><p>2.使用Mockito.when()进行stub；</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.mockStatic(Static.class);<br>Mockito.when(Static.firstStaticMethod(param)).thenReturn(value);<br></code></pre></td></tr></table></figure><h4 id="1-2-Verify">1.2 Verify</h4><p>检验行为分成两步：<br>1.首先调用PowerMockito.verifyStatic()开始校验动作</p><p>2.然后调用你想要校验的静态方法</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.verifyStatic(); <span class="hljs-comment">// default times is once</span><br>Static.firstStaticMethod(param); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p><strong>important</strong><br>每一个静态方法的校验前，都应该调用一次verifyStatic()。<br>官方原文：</p><blockquote><p>Important: You need to call verifyStatic() per method verification.</p></blockquote><h4 id="1-3-stub-void-static-method-to-throw-exception">1.3 stub void static method to throw exception</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// arrange</span><br>PowerMockito.doThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>()).when(StaticExample.class);<br>StaticExample.isVoidStaticMethod();     <span class="hljs-comment">//call the method stubbed to stub</span><br><br><span class="hljs-comment">// act, call the method again</span><br>StaticExample.isVoidStaticMethod();<br></code></pre></td></tr></table></figure><p>使用PowerMockito.doThrow(~).when(~)来stub，并且调用一次你要stub的方法，完成stub！</p><h3 id="2-private-method">2. private method</h3><p>对于私有方法，需要采用局部模拟（partial mocking）的手段来实现！</p><h4 id="2-1-mock-stub">2.1 mock &amp; stub</h4><p>先构建spy对象，然后通过PowerMockito.when(underTest, nameOfMethodToMock, …param).thenXXX()来实现;(会在打桩时产生真实调用)<br>或者采用PowerMockito.doXXX().when(underTest, nameOfMethodToMock, …param)实现；(推荐使用，不会产生任何真实调用)</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StaticExample</span> <span class="hljs-variable">staticExampleMock</span> <span class="hljs-operator">=</span> PowerMockito.spy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticExample</span>());<br><span class="hljs-comment">// For private methods use PowerMockito.when</span><br>PowerMockito.doReturn(RETURN_VALUE).when(staticExampleMock,<span class="hljs-string">&quot;isPrivateMethod&quot;</span>,anyInt());<br><span class="hljs-comment">//when(staticExampleMock,&quot;isPrivateMethod&quot;,anyInt()).thenReturn(RETURN_VALUE);</span><br></code></pre></td></tr></table></figure><h4 id="2-2-verify">2.2 verify</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">verifyPrivate(staticExampleMock).invoke(<span class="hljs-string">&quot;isPrivateMethod&quot;</span>, anyInt());<br></code></pre></td></tr></table></figure><h3 id="3-Constructor">3. Constructor</h3><h4 id="3-1-mock-stub">3.1 mock &amp; stub</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.whenNew(MyClass.class).withNoArguments().thenThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;error message&quot;</span>));<br></code></pre></td></tr></table></figure><p>有参数的构造器也有相应的stub，形如whenNew(~).withXXX(~).thenXXX(~)，可以参见API，此处不赘述！</p><p><strong>Notice</strong>：在@PrepareForTest(Class&lt;?&gt;[] value)中，应该写入调用构造器的方法所属对象的类型！<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-meta">@PrepareForTest(X.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        whenNew(MyClass.class).withNoArguments().thenThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;error message&quot;</span>));<br><br>        <span class="hljs-type">X</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X</span>();<br>        x.y(); <span class="hljs-comment">// y is the method doing &quot;new MyClass()&quot;</span><br><br>        ..<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-verify">3.2 verify</h4><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PowerMockito.verifyNew(MyClass.class).withNoArguments();<br></code></pre></td></tr></table></figure><h3 id="4-final-method">4. final method</h3><p>final method 的mock, stub, verify与普通方法类似，此处不再赘述！</p><hr><h2 id="参考资料-3">参考资料</h2><p><a href="https://github.com/OAbern/mock-demo">鄙人编写的代码示例</a>（部分来自官网示例，适量修改，并添加额外的示例）<br><a href="https://github.com/jayway/powermock">PowerMock On Github</a><br><a href="http://my.oschina.net/u/1433482/blog/645155#comment-list">使用PowerMock进行Mock测试</a><br><a href="http://www.ibm.com/developerworks/cn/java/j-lo-powermock/">PowerMock简介</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Test</tag>
      
      <tag>PowerMock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mockito</title>
    <link href="/posts/201612072734635843/"/>
    <url>/posts/201612072734635843/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Dan North, the originator of Behavior-Driven Development wrote this back in 2008:<br>“We decided during the main conference that we should use JUnit 4 and Mockito because we think they are the future of TDD and mocking in Java”</p></blockquote><hr><p><strong>说明</strong><br>本文章中的示例使用的开发环境为JDK1.8！<br>Mockito的版本信息如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文章中的示例部分来自<a href="https://dzone.com/refcardz/mockito">Mockito Dzone Reference Card</a></p><p><strong>Warning</strong>：文章中的示例只是为了展示Mockito的语法和特性，在实际的测试编码中，我们可能不会使用示例的用法（测试逻辑）！<br>官方原文：</p><blockquote><p>Warning: Note that the examples in this Refcardwere created to demonstrate behaviors of Mockito in a specific context. Of course, when writing the test for your codebase, there is no need to ensure that mocks are stubbed correctly.</p></blockquote><p>鄙人在Github上修改了部分示例，并且写了一些其他的示例（实际测试代码中用法）！<a href="https://github.com/OAbern/mock-demo">传送门</a></p><hr><h2 id="简介">简介</h2><p>Mockito是一个模拟测试框架。在一个被测试的对象（功能）A中，它通常需要与其他的对象（功能）B进行一些交互，我们把A称作被测试对象（tested object），把B称作协作者（collaborators）。那么在测试环境中，这些协作者都需要被创建，以便被测试对象可以使用它们。为了使测试代码简化以及满足上下文执行环境，我们通常使用测试替身（test double）来代替这些协作者，测试替身看上去和原始的协作者一样，但是却不依赖其他对象，而且可以执行预期行为，记录他们的交互行为（interactions，可以理解成方法调用）</p><hr><h2 id="核心元素">核心元素</h2><p><strong>TDD</strong> : Test-Driven Development</p><p><strong>BDD</strong> : Behavior-Driven Development</p><p><strong>Mock</strong> : 模拟对象，可以理解成Mockito框架帮我们自动生成的数据。通过mock产生的对象有以下的能力：1.可以通过编程产生预期行为；2.在对象的生命周期内可以校验它的交互行为（方法调用）；</p><blockquote><p>原文参考：Mock - an object with the ability to a) have a programmed expected behavior, and b) verify the interactions occurring in its lifetime (this object is usually created with the help of mocking framework)</p></blockquote><p><strong>Stub</strong> : 存根？桩？可以理解成通过硬编码的方式预期定义行为（方法），将会产生特定的结果，屏蔽原本行为（方法）的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**举例，伪代码描述*/</span><br><br><span class="hljs-comment">//define a method</span><br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">sayABC</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//stubbing</span><br>define when call sayABC the <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CBA&quot;</span><br><br><span class="hljs-comment">//act</span><br>sayABC();   <span class="hljs-comment">//call then we got &quot;CBA&quot; not &quot;ABC&quot;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>原文参考：Stub - an object with hardcoded behavior suitable for a given test (or a group of tests)</p></blockquote><p><strong>Spy</strong> : mock的代理对象，当方法被stub的时候，调用stub的定义行为（方法实现被忽略）；当方法没有被stub时，调用真实对象的行为（调用真实方法的逻辑实现）。此对象一般不由mock生成，而是自己编码new，再通过spy包装成mock</p><blockquote><p>原文参考：Spy - a mock created as a proxy to an existing real object; some methods can be stubbed, while the un-stubbed ones are forwarded to the covered object</p></blockquote><p><a href="https://en.wikipedia.org/wiki/Test_double"><strong>Test Doubles</strong></a>：测试替身，包括5个类型stub，mock，spy，fake，dummy。</p><hr><h2 id="地心历险-待研究">地心历险(待研究)</h2><p>揭示底层的原理</p><hr><h2 id="实战">实战</h2><h3 id="1-概述">1. 概述</h3><p>编写测试用例，一般分为三个阶段：</p><table><thead><tr><th>Section name</th><th>Responsibility</th></tr></thead><tbody><tr><td>arrange (given)</td><td>SUT and mocks initialization and configuration</td></tr><tr><td>act (when)</td><td>An operation which is a subject to testing；preferably only one operation on an SUT</td></tr><tr><td>assert (then)</td><td>The assertion and verification phase</td></tr></tbody></table><p>arrange-act-assert模式对应的语法为：when(~).thenXXX(~)<br>given-when-then模式(对应BDD形式)对应的语法为：given(~).willXXX(~)<br>官方大部分DEMO使用given-when-then模式，而且也推荐使用这种模式</p><blockquote><p>官方原文: given-when-then comments make intentions of tests clearer.</p></blockquote><h3 id="2-简例">2. 简例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.testng.annotations.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.Mockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.testng.Assert.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleStubbingTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TEST_NUMBER_OF_LEAFS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>  <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldReturnGivenValue</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// arrange</span><br>      <span class="hljs-type">Flower</span> <span class="hljs-variable">flowerMock</span> <span class="hljs-operator">=</span> mock(Flower.class);<br>      when(flowerMock.getNumberOfLeafs()).thenReturn(TEST_NUMBER_OF_LEAFS);<br>  <br>      <span class="hljs-comment">// act</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">numberOfLeafs</span> <span class="hljs-operator">=</span> flowerMock.getNumberOfLeafs();<br>      <br>      <span class="hljs-comment">// assert</span><br>      assertEquals(numberOfLeafs, TEST_NUMBER_OF_LEAFS);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.Mockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.BDDMockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleStubbingTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TEST_NUMBER_OF_LEAFS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>  <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldReturnGivenValueUsingBDDSemantics</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//given</span><br>      <span class="hljs-type">Flower</span> <span class="hljs-variable">flowerMock</span> <span class="hljs-operator">=</span> mock(Flower.class);<br>      given(flowerMock.getNumberOfLeafs()).willReturn(TEST_NUMBER_OF_LEAFS);<br>  <br>      <span class="hljs-comment">//when</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">numberOfLeafs</span> <span class="hljs-operator">=</span> flowerMock.getNumberOfLeafs();<br>      <br>      <span class="hljs-comment">//then</span><br>      assertEquals(numberOfLeafs, TEST_NUMBER_OF_LEAFS);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-参数匹配">3. 参数匹配</h3><p><code>（Argument Matching）</code><br>Mockito默认使用equals()来匹配参数。通常我们需要一个宽范围的参数匹配，Mockito的org.mockito.Matchers类中提供了一套内置的匹配器（Matcher）。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">given(plantSearcherMock.smellyMethod(anyInt(), contains(<span class="hljs-string">&quot;asparag&quot;</span>), eq(<span class="hljs-string">&quot;red&quot;</span>))).willReturn(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//given(plantSearcherMock.smellyMethod(anyInt(), contains(&quot;asparag&quot;), &quot;red&quot;)).willReturn(true);</span><br><br><span class="hljs-comment">//incorrect - would throw an exception</span><br></code></pre></td></tr></table></figure><p>如果有一个参数使用了匹配器，则所有的参数必须都使用匹配器，否则将会抛出异常！示例代码中注释掉的部分会抛出异常！</p><p>自定义的参数匹配器需要继承org.mockito.ArgumentMatcher抽象类，并且实现matches方法。然后调用argThat(org.hamcrest.Matcher<T> matcher)方法。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">given(schedulerMock.getNumberOfPlantsScheduledOnDate(<br>  argThat(haveHourFieldEqualTo(<span class="hljs-number">7</span>)))).willReturn(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//with the util method to create a matcher</span><br><span class="hljs-keyword">private</span> ArgumentMatcher <span class="hljs-title function_">haveHourFieldEqualTo</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hour)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArgumentMatcher</span>() &#123;<br>  <br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(Object argument)</span> &#123;<br>          <span class="hljs-keyword">return</span> ((Date) argument).getHours() == hour;<br>      &#125;<br>  &#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-调用Void方法">4. 调用Void方法</h3><p><code>Stubbing Void Methods</code><br>void Methods 应该使用 willXXX…given 或者 doXXX…when.来进行stubbing<br>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test(expectedExceptions = WaterException.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldStubVoidMethod</span><span class="hljs-params">()</span> &#123;<br><br>  <span class="hljs-type">WaterSource</span> <span class="hljs-variable">waterSourceMock</span> <span class="hljs-operator">=</span> mock(WaterSource.class);<br>  doThrow(WaterException.class).when(waterSourceMock).doSelfCheck();<br><br>  <span class="hljs-comment">//the same with BDD semantics</span><br>  <span class="hljs-comment">//willThrow(WaterException.class).given(waterSourceMock).doSelfCheck();</span><br><br>  waterSourceMock.doSelfCheck();<br><br>  <span class="hljs-comment">//exception expected</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-自定义返回器">5. 自定义返回器</h3><p><code>Stubbing With a Custom Answer</code><br>极少的情况会使用自己的处理逻辑来指定预期行为的结果(也就是given…willReturn(Custom Answer)中的Answer).Mockito还是提供了<code>org.mockito.stubbing.Answer&lt;Object&gt;</code>的接口来实现这个功能，你只需实现该接口中的answer方法。</p><p><strong>Warning</strong>：如果需要使用Custom Answer，可能预示着被测代码太复杂，需要重构！<br>官方原文：</p><blockquote><p>Warning: The need to use a custom answer may indicate that tested code is too complicated and should be re-factored.</p></blockquote><h3 id="6-检验行为">6. 检验行为</h3><p><code>（Verifying Behavior）</code><br>在一个mock对象的生命周期内，它会记住本身所有的操作。在被测系统（SUT）中，这些操作应该可以被轻易校验。Mockito中可以使用Mockito.verify(T mock)这个基础形式来进行校验<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">WaterSourcewaterSourceMock = mock(WaterSource.class);<br><br>waterSourceMock.doSelfCheck();<br><br>verify(waterSourceMock).doSelfCheck();      <span class="hljs-comment">//默认校验一次调用</span><br></code></pre></td></tr></table></figure><p>Mockito提供了一些有意义的校验模式，你也可以创建自定义校验模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">verify(waterSourceMock,never()).doSelfCheck();<br><br>verify(waterSourceMock,times(<span class="hljs-number">2</span>)).getWaterPressure();<br><br>verify(waterSourceMock,atLeast(<span class="hljs-number">1</span>)).getWaterTemperature();<br></code></pre></td></tr></table></figure><h3 id="7-校验调用顺序">7. 校验调用顺序</h3><p><code>（Verifying Call Order）</code><br>Mockito可以让你校验调用的顺序，你可以创建一组mocks，然后在组内校验所有的调用顺序。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldVerifyInOrderThroughDifferentMocks</span><span class="hljs-params">()</span>&#123;<br><br>  WaterSourcewaterSource1=mock(WaterSource.class);<br>  WaterSourcewaterSource2=mock(WaterSource.class);<br><br>  waterSource1.doSelfCheck();<br>  waterSource2.getWaterPressure();<br>  waterSource1.getWaterTemperature();<br><br>  InOrderinOrder=inOrder(waterSource1,waterSource2);<br>  inOrder.verify(waterSource1).doSelfCheck();<br>  inOrder.verify(waterSource2).getWaterPressure();<br>  inOrder.verify(waterSource1).getWaterTemperature();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-真实调用">8. 真实调用</h3><p><code>Spying on Real Objects</code><br>在Mockito中，你可以使用真实的对象来代替mock，从而使部分方法可以stubbed。通常我们不需要使用spy一个真实的对象，这可能是代码异味（code smell）的信号。但在一些特殊的情况下（比如使用了遗留代码，或者IOC容器），纯mock对象可能不能进行测试。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldStubMethodAndCallRealNotStubbedMethod</span><span class="hljs-params">()</span> &#123;<br><br>  <span class="hljs-type">Flower</span> <span class="hljs-variable">realFlower</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>();<br>  realFlower.setNumberOfLeafs(ORIGINAL_NUMBER_OF_LEAFS);<br>  FlowerflowerSpy=spy(realFlower);<br>  willDoNothing().given(flowerSpy).setNumberOfLeafs(anyInt());<br><br>  flowerSpy.setNumberOfLeafs(NEW_NUMBER_OF_LEAFS);  <span class="hljs-comment">//stubbed,and should do nothing</span><br><br>  verify(flowerSpy).setNumberOfLeafs(NEW_NUMBER_OF_LEAFS);<br>  assertEquals(flowerSpy.getNumberOfLeafs(),ORIGINAL_NUMBER_OF_LEAFS);       <span class="hljs-comment">//value was not changed</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>当使用spy时，必须使用willXXX…given/ doXXX…的形式来stubbing，它可以在stub期间防止真实方法方法被调用</p><p><strong>Warning</strong>：当使用spy时，Mockito创建了真实对象的一份拷贝，因此所有的交互行为应该被传递到被创建的spy对象上<br>官方原文：</p><blockquote><p>Warning: While spying, Mockito creates a copy of a real object, and therefore all interactions should be passed using the created spy.</p></blockquote><h3 id="9-注解">9. 注解</h3><p><code>Annotations</code><br>Mockito提供三个注解来简化用静态方法创建mock对象的工作 – @Mock, @Spy, @Captor；注解@InjectMocks可以简化mock和spy对象的注入，它可以通过构造器注入，setter方法注入，field赋值注入。</p><p>使用注解的功能要调用MockitoAnnotations.initMocks(testClass)（通常在@Before的方法中调用），或者使用MockitoJUnit4Runner来作为junit runner</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//with constructor: PlantWaterer(WaterSource waterSource,</span><br><span class="hljs-comment">// WateringScheduler wateringScheduler) &#123;...&#125;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MockInjectingTest</span> &#123;<br><br>  <span class="hljs-meta">@Mock</span><br>  <span class="hljs-keyword">private</span> WaterSource waterSourceMock;<br><br>  <span class="hljs-meta">@Spy</span><br>  <span class="hljs-keyword">private</span> WateringScheduler wateringSchedulerSpy;<br><br>  <span class="hljs-meta">@InjectMocks</span><br>  <span class="hljs-keyword">private</span> PlantWaterer plantWaterer;<br><br>  <span class="hljs-meta">@BeforeMethod</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>      MockitoAnnotations.initMocks(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldInjectMocks</span><span class="hljs-params">()</span> &#123;<br>      assertNotNull(plantWaterer.getWaterSource());<br>      assertNotNull(plantWaterer.getWateringScheduler());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Annotation</th><th>Responsibility</th></tr></thead><tbody><tr><td>@Mock</td><td>Creates a mock of a given type</td></tr><tr><td>@Spy</td><td>Creates a spy of a given object</td></tr><tr><td>@Captor</td><td>Creates an argument captor of a given type</td></tr><tr><td>@InjectMocks</td><td>Creates an object of a given type and injects mocks and spies existing in a test</td></tr></tbody></table><h3 id="10-修改默认返回值">10. 修改默认返回值</h3><p><code>（Changing the Mock Default Return Value）</code></p><p>Mockito使我们可以选择生成mock对象的默认值</p><table><thead><tr><th>Default Answer</th><th>Description</th></tr></thead><tbody><tr><td>RETURNS_DEFAULTS</td><td>Returns a default “empty” value (e.g., null, 0, false, empty collection) - used by default</td></tr><tr><td>RETURNS_SMART_NULLS</td><td>Creates a spy of a given object</td></tr><tr><td>RETURNS_MOCKS</td><td>Returns a default “empty” value, but a mock instead of null</td></tr><tr><td>RETURNS_DEEP_STUBS</td><td>Allows for a simple deep stubbing (e.g., Given(ourMock.getObject().getValue()).willReturn(s))</td></tr><tr><td>CALLS_REAL_METHODS</td><td>Call a real method of spied object</td></tr></tbody></table><blockquote><p>mock(clazz, Mockito.${Default Answer})</p></blockquote><h3 id="Tips">Tips</h3><p>依照本人的理解，在真正编写测试代码时，我们应该分清当前单元测试的目的，以及它所依赖的方法调用。然后在given阶段，mock各种依赖的对象，并且stub各种依赖对象的预期行为；when阶段进行测试目的的执行，也就是测试对象真实的调用行为；then阶段进行verify和assert。</p><hr><h2 id="局限性">局限性</h2><p>引用官方说明:<br><strong>Limitations</strong></p><ul><li>Mockito has a few limitations worth remembering. They are generally technical restrictions, but Mockito authors believe using hacks to work around them would encourage people to write poorly testable code. <strong>Mockito cannot</strong> :<ul><li>mock final classes</li><li>mock enums</li><li>mock final methods</li><li>mock static methods</li><li>mock private methods</li><li>mock hashCode() and equals()</li></ul></li></ul><h2 id="参考资料">参考资料</h2><p><a href="https://github.com/OAbern/mock-demo">鄙人编写的代码示例</a>（部分来自官网示例，适量修改，并添加额外的示例）<br><a href="http://mockito.org/">Mockito官网</a><br><a href="https://github.com/mockito/mockito">Mockito On Github</a><br><a href="https://dzone.com/refcardz/mockito">Mockito Dzone Reference Card</a><br><a href="http://stackoverflow.com/documentation/mockito/2055/introduction-to-mockito#t=201608090656397575575">Introduction to mockito</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Test</tag>
      
      <tag>Mockito</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京工业大学公开课：摄影的实用性与艺术性漫谈</title>
    <link href="/posts/201608033265830174/"/>
    <url>/posts/201608033265830174/</url>
    
    <content type="html"><![CDATA[<h3 id="摄影的视觉意义">摄影的视觉意义</h3><ol><li>摄影使光线永远停留</li><li>摄影使真实永存</li></ol><h3 id="摄影的必备器材与拍摄技法">摄影的必备器材与拍摄技法</h3><ol><li>摄影器材分类：传统胶片相机，现代数码相机</li><li>光圈与景深的关系；在不考虑景深问题的情况下，尽量用中等光圈（四角的清晰度会有差别，中心部位的光圈成像质量是最好的）</li><li>慢速摄影与高速摄影</li><li>尝试多角度的拍摄</li></ol><h3 id="摄影的视觉平面艺术构成">摄影的视觉平面艺术构成</h3><ol><li>构图之前的观察：形状，线条，影调（黑白），色彩（冷暖）</li></ol><h3 id="摄影的光线艺术">摄影的光线艺术</h3><ol><li>光线分类：顺光（正面光）；侧光；（侧，顶，纯）逆光；顶光；脚光；混合光；散射光；</li><li>光与影的结合</li></ol><h3 id="摄影的瞬间性">摄影的瞬间性</h3><ol><li>摄影的瞬间性是摄影的本质</li><li>摄影要抓住决定性的瞬间</li><li>新闻摄影、纪实摄影不允许作假，不允许动，不能破坏瞬间性（原则性问题）</li><li>瞬间感要多进行抓拍（连拍），不要失去那个决定的瞬间，否则可能悔恨一辈子！</li></ol><h3 id="摄影的艺术情感与艺术风格">摄影的艺术情感与艺术风格</h3><ol><li>把自己的情感和个性融入到作品里面</li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公开课</tag>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
